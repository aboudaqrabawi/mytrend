{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _internals = _interopRequireDefault(require(\"../../utils/internals\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _ModuleBase2 = _interopRequireDefault(require(\"../../utils/ModuleBase\"));\n\nvar _database = _interopRequireDefault(require(\"./database\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar FirebaseCoreModule = _reactNative.NativeModules.RNFirebase;\nvar MODULE_NAME = 'RNFirebaseUtils';\nexports.MODULE_NAME = MODULE_NAME;\nvar NAMESPACE = 'utils';\nexports.NAMESPACE = NAMESPACE;\n\nvar RNFirebaseUtils = function (_ModuleBase) {\n  (0, _inherits2.default)(RNFirebaseUtils, _ModuleBase);\n\n  var _super = _createSuper(RNFirebaseUtils);\n\n  function RNFirebaseUtils(app) {\n    (0, _classCallCheck2.default)(this, RNFirebaseUtils);\n    return _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  (0, _createClass2.default)(RNFirebaseUtils, [{\n    key: \"database\",\n    get: function get() {\n      return _database.default;\n    }\n  }, {\n    key: \"checkPlayServicesAvailability\",\n    value: function checkPlayServicesAvailability() {\n      if (_utils.isIOS) return;\n      var status = this.playServicesAvailability.status;\n\n      if (!this.playServicesAvailability.isAvailable) {\n        if (_internals.default.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n          this.promptForPlayServices();\n        } else {\n          var error = _internals.default.STRINGS.ERROR_PLAY_SERVICES(status);\n\n          if (_internals.default.OPTIONS.errorOnMissingPlayServices) {\n            if (status === 2) console.warn(error);else throw new Error(error);\n          } else {\n            console.warn(error);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getPlayServicesStatus\",\n    value: function getPlayServicesStatus() {\n      if (_utils.isIOS) return Promise.resolve(null);\n      return FirebaseCoreModule.getPlayServicesStatus();\n    }\n  }, {\n    key: \"promptForPlayServices\",\n    value: function promptForPlayServices() {\n      if (_utils.isIOS) return null;\n      return FirebaseCoreModule.promptForPlayServices();\n    }\n  }, {\n    key: \"resolutionForPlayServices\",\n    value: function resolutionForPlayServices() {\n      if (_utils.isIOS) return null;\n      return FirebaseCoreModule.resolutionForPlayServices();\n    }\n  }, {\n    key: \"makePlayServicesAvailable\",\n    value: function makePlayServicesAvailable() {\n      if (_utils.isIOS) return null;\n      return FirebaseCoreModule.makePlayServicesAvailable();\n    }\n  }, {\n    key: \"logLevel\",\n    set: function set(logLevel) {\n      _internals.default.OPTIONS.logLevel = logLevel;\n    }\n  }, {\n    key: \"playServicesAvailability\",\n    get: function get() {\n      return FirebaseCoreModule.playServicesAvailability || {\n        isAvailable: true,\n        status: 0\n      };\n    }\n  }, {\n    key: \"errorOnMissingPlayServices\",\n    set: function set(bool) {\n      _internals.default.OPTIONS.errorOnMissingPlayServices = bool;\n    }\n  }, {\n    key: \"promptOnMissingPlayServices\",\n    set: function set(bool) {\n      _internals.default.OPTIONS.promptOnMissingPlayServices = bool;\n    }\n  }]);\n  return RNFirebaseUtils;\n}(_ModuleBase2.default);\n\nexports.default = RNFirebaseUtils;\nvar statics = {};\nexports.statics = statics;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/utils/index.js"],"names":["FirebaseCoreModule","NativeModules","RNFirebase","MODULE_NAME","NAMESPACE","RNFirebaseUtils","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","DatabaseUtils","isIOS","status","playServicesAvailability","isAvailable","INTERNALS","OPTIONS","promptOnMissingPlayServices","isUserResolvableError","promptForPlayServices","error","STRINGS","ERROR_PLAY_SERVICES","errorOnMissingPlayServices","console","warn","Error","Promise","resolve","getPlayServicesStatus","resolutionForPlayServices","makePlayServicesAvailable","logLevel","bool","ModuleBase","statics"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AACA,IAAMA,kBAAkB,GAAGC,2BAAcC,UAAzC;AACO,IAAMC,WAAW,GAAG,iBAApB;;AACA,IAAMC,SAAS,GAAG,OAAlB;;;IACcC,e;;;;;AACnB,2BAAYC,GAAZ,EAAiB;AAAA;AAAA,6BACTA,GADS,EACJ;AACTC,MAAAA,UAAU,EAAEJ,WADH;AAETK,MAAAA,kBAAkB,EAAE,KAFX;AAGTC,MAAAA,mBAAmB,EAAE,KAHZ;AAITC,MAAAA,SAAS,EAAEN;AAJF,KADI;AAOhB;;;;SAED,eAAe;AACb,aAAOO,iBAAP;AACD;;;WAMD,yCAAgC;AAC9B,UAAIC,YAAJ,EAAW;AADmB,UAG5BC,MAH4B,GAI1B,KAAKC,wBAJqB,CAG5BD,MAH4B;;AAM9B,UAAI,CAAC,KAAKC,wBAAL,CAA8BC,WAAnC,EAAgD;AAC9C,YAAIC,mBAAUC,OAAV,CAAkBC,2BAAlB,IAAiD,KAAKJ,wBAAL,CAA8BK,qBAAnF,EAA0G;AACxG,eAAKC,qBAAL;AACD,SAFD,MAEO;AACL,cAAMC,KAAK,GAAGL,mBAAUM,OAAV,CAAkBC,mBAAlB,CAAsCV,MAAtC,CAAd;;AAEA,cAAIG,mBAAUC,OAAV,CAAkBO,0BAAtB,EAAkD;AAChD,gBAAIX,MAAM,KAAK,CAAf,EAAkBY,OAAO,CAACC,IAAR,CAAaL,KAAb,EAAlB,KACK,MAAM,IAAIM,KAAJ,CAAUN,KAAV,CAAN;AACN,WAHD,MAGO;AACLI,YAAAA,OAAO,CAACC,IAAR,CAAaL,KAAb;AACD;AACF;AACF;AACF;;;WAED,iCAAwB;AACtB,UAAIT,YAAJ,EAAW,OAAOgB,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACX,aAAO7B,kBAAkB,CAAC8B,qBAAnB,EAAP;AACD;;;WAED,iCAAwB;AACtB,UAAIlB,YAAJ,EAAW,OAAO,IAAP;AACX,aAAOZ,kBAAkB,CAACoB,qBAAnB,EAAP;AACD;;;WAED,qCAA4B;AAC1B,UAAIR,YAAJ,EAAW,OAAO,IAAP;AACX,aAAOZ,kBAAkB,CAAC+B,yBAAnB,EAAP;AACD;;;WAED,qCAA4B;AAC1B,UAAInB,YAAJ,EAAW,OAAO,IAAP;AACX,aAAOZ,kBAAkB,CAACgC,yBAAnB,EAAP;AACD;;;SAQD,aAAaC,QAAb,EAAuB;AACrBjB,yBAAUC,OAAV,CAAkBgB,QAAlB,GAA6BA,QAA7B;AACD;;;SAQD,eAA+B;AAC7B,aAAOjC,kBAAkB,CAACc,wBAAnB,IAA+C;AACpDC,QAAAA,WAAW,EAAE,IADuC;AAEpDF,QAAAA,MAAM,EAAE;AAF4C,OAAtD;AAID;;;SAQD,aAA+BqB,IAA/B,EAAqC;AACnClB,yBAAUC,OAAV,CAAkBO,0BAAlB,GAA+CU,IAA/C;AACD;;;SAQD,aAAgCA,IAAhC,EAAsC;AACpClB,yBAAUC,OAAV,CAAkBC,2BAAlB,GAAgDgB,IAAhD;AACD;;;EArG0CC,oB;;;AAwGtC,IAAMC,OAAO,GAAG,EAAhB","sourcesContent":["import { NativeModules } from 'react-native';\nimport INTERNALS from '../../utils/internals';\nimport { isIOS } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport DatabaseUtils from './database';\nconst FirebaseCoreModule = NativeModules.RNFirebase;\nexport const MODULE_NAME = 'RNFirebaseUtils';\nexport const NAMESPACE = 'utils';\nexport default class RNFirebaseUtils extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  get database() {\n    return DatabaseUtils;\n  }\n  /**\n   *\n   */\n\n\n  checkPlayServicesAvailability() {\n    if (isIOS) return;\n    const {\n      status\n    } = this.playServicesAvailability;\n\n    if (!this.playServicesAvailability.isAvailable) {\n      if (INTERNALS.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n        this.promptForPlayServices();\n      } else {\n        const error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n\n        if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n          if (status === 2) console.warn(error); // only warn if it exists but may need an update\n          else throw new Error(error);\n        } else {\n          console.warn(error);\n        }\n      }\n    }\n  }\n\n  getPlayServicesStatus() {\n    if (isIOS) return Promise.resolve(null);\n    return FirebaseCoreModule.getPlayServicesStatus();\n  }\n\n  promptForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.promptForPlayServices();\n  }\n\n  resolutionForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.resolutionForPlayServices();\n  }\n\n  makePlayServicesAvailable() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.makePlayServicesAvailable();\n  }\n  /**\n   * Set the global logging level for all logs.\n   *\n   * @param logLevel\n   */\n\n\n  set logLevel(logLevel) {\n    INTERNALS.OPTIONS.logLevel = logLevel;\n  }\n  /**\n   * Returns props from the android GoogleApiAvailability sdk\n   * @android\n   * @return {RNFirebase.GoogleApiAvailabilityType|{isAvailable: boolean, status: number}}\n   */\n\n\n  get playServicesAvailability() {\n    return FirebaseCoreModule.playServicesAvailability || {\n      isAvailable: true,\n      status: 0\n    };\n  }\n  /**\n   * Enable/Disable throwing an error or warning on detecting a play services problem\n   * @android\n   * @param bool\n   */\n\n\n  set errorOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n  }\n  /**\n   * Enable/Disable automatic prompting of the play services update dialog\n   * @android\n   * @param bool\n   */\n\n\n  set promptOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n  }\n\n}\nexport const statics = {};"]},"metadata":{},"sourceType":"script"}