{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _native = require(\"../../utils/native\");\n\nvar _utils = require(\"../../utils\");\n\nvar AuthSettings = function () {\n  function AuthSettings(auth) {\n    (0, _classCallCheck2.default)(this, AuthSettings);\n    this._auth = auth;\n    this._appVerificationDisabledForTesting = false;\n  }\n\n  (0, _createClass2.default)(AuthSettings, [{\n    key: \"appVerificationDisabledForTesting\",\n    get: function get() {\n      return this._appVerificationDisabledForTesting;\n    },\n    set: function set(disabled) {\n      if (_utils.isIOS) {\n        this._appVerificationDisabledForTesting = disabled;\n        (0, _native.getNativeModule)(this._auth).setAppVerificationDisabledForTesting(disabled);\n      }\n    }\n  }, {\n    key: \"setAutoRetrievedSmsCodeForPhoneNumber\",\n    value: function setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode) {\n      if (_utils.isAndroid) {\n        return (0, _native.getNativeModule)(this._auth).setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode);\n      }\n\n      return Promise.resolve(null);\n    }\n  }]);\n  return AuthSettings;\n}();\n\nexports.default = AuthSettings;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/auth/AuthSettings.js"],"names":["AuthSettings","auth","_auth","_appVerificationDisabledForTesting","disabled","isIOS","setAppVerificationDisabledForTesting","phoneNumber","smsCode","isAndroid","setAutoRetrievedSmsCodeForPhoneNumber","Promise","resolve"],"mappings":";;;;;;;;;;;AAAA;;AACA;;IAMqBA,Y;AACnB,wBAAYC,IAAZ,EAAkB;AAAA;AAChB,SAAKC,KAAL,GAAaD,IAAb;AACA,SAAKE,kCAAL,GAA0C,KAA1C;AACD;;;;SASD,eAAwC;AACtC,aAAO,KAAKA,kCAAZ;AACD,K;SASD,aAAsCC,QAAtC,EAAgD;AAC9C,UAAIC,YAAJ,EAAW;AACT,aAAKF,kCAAL,GAA0CC,QAA1C;AACA,qCAAgB,KAAKF,KAArB,EAA4BI,oCAA5B,CAAiEF,QAAjE;AACD;AACF;;;WAeD,+CAAsCG,WAAtC,EAAmDC,OAAnD,EAA4D;AAC1D,UAAIC,gBAAJ,EAAe;AACb,eAAO,6BAAgB,KAAKP,KAArB,EAA4BQ,qCAA5B,CAAkEH,WAAlE,EAA+EC,OAA/E,CAAP;AACD;;AAED,aAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD","sourcesContent":["import { getNativeModule } from '../../utils/native';\nimport { isAndroid, isIOS } from '../../utils';\n\n/**\n * Interface representing an Auth instance's settings, currently used\n * for enabling/disabling app verification for phone Auth testing. *\n */\nexport default class AuthSettings {\n  constructor(auth) {\n    this._auth = auth;\n    this._appVerificationDisabledForTesting = false;\n  }\n  /**\n   * Flag to determine whether app verification should be disabled for testing or not.\n   *\n   * @platform iOS\n   * @return {boolean}\n   */\n\n\n  get appVerificationDisabledForTesting() {\n    return this._appVerificationDisabledForTesting;\n  }\n  /**\n   * Flag to determine whether app verification should be disabled for testing or not.\n   *\n   * @platform iOS\n   * @param disabled\n   */\n\n\n  set appVerificationDisabledForTesting(disabled) {\n    if (isIOS) {\n      this._appVerificationDisabledForTesting = disabled;\n      getNativeModule(this._auth).setAppVerificationDisabledForTesting(disabled);\n    }\n  }\n  /**\n   * The phone number and SMS code here must have been configured in the\n   * Firebase Console (Authentication > Sign In Method > Phone).\n   *\n   * Calling this method a second time will overwrite the previously passed parameters.\n   * Only one number can be configured at a given time.\n   *\n   * @platform Android\n   * @param phoneNumber\n   * @param smsCode\n   * @return {*}\n   */\n\n\n  setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode) {\n    if (isAndroid) {\n      return getNativeModule(this._auth).setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode);\n    }\n\n    return Promise.resolve(null);\n  }\n\n}"]},"metadata":{},"sourceType":"script"}