{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Reference = _interopRequireDefault(require(\"./Reference\"));\n\nvar _transaction = _interopRequireDefault(require(\"./transaction\"));\n\nvar _ModuleBase2 = _interopRequireDefault(require(\"../../utils/ModuleBase\"));\n\nvar _native = require(\"../../utils/native\");\n\nvar _firebase = _interopRequireDefault(require(\"../core/firebase\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NATIVE_EVENTS = ['database_transaction_event'];\nvar MODULE_NAME = 'RNFirebaseDatabase';\nexports.MODULE_NAME = MODULE_NAME;\nvar NAMESPACE = 'database';\nexports.NAMESPACE = NAMESPACE;\n\nvar Database = function (_ModuleBase) {\n  (0, _inherits2.default)(Database, _ModuleBase);\n\n  var _super = _createSuper(Database);\n\n  function Database(appOrCustomUrl, customUrl) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Database);\n    var app;\n    var url;\n\n    if (typeof appOrCustomUrl === 'string') {\n      app = _firebase.default.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    }\n\n    url = url.endsWith('/') ? url : url + \"/\";\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url);\n    _this._serverTimeOffset = 0;\n    _this._databaseURL = url;\n    _this._transactionHandler = new _transaction.default((0, _assertThisInitialized2.default)(_this));\n\n    if (app.options.persistence) {\n      (0, _native.getNativeModule)((0, _assertThisInitialized2.default)(_this)).setPersistence(app.options.persistence);\n    }\n\n    setTimeout(function () {\n      _this._offsetRef = _this.ref('.info/serverTimeOffset');\n\n      _this._offsetRef.on('value', function (snapshot) {\n        _this._serverTimeOffset = snapshot.val() || _this._serverTimeOffset;\n      });\n    }, 1);\n    return _this;\n  }\n\n  (0, _createClass2.default)(Database, [{\n    key: \"getServerTime\",\n    value: function getServerTime() {\n      return new Date(Date.now() + this._serverTimeOffset);\n    }\n  }, {\n    key: \"goOnline\",\n    value: function goOnline() {\n      (0, _native.getNativeModule)(this).goOnline();\n    }\n  }, {\n    key: \"goOffline\",\n    value: function goOffline() {\n      (0, _native.getNativeModule)(this).goOffline();\n    }\n  }, {\n    key: \"ref\",\n    value: function ref(path) {\n      return new _Reference.default(this, path);\n    }\n  }, {\n    key: \"databaseUrl\",\n    get: function get() {\n      return this._databaseURL;\n    }\n  }]);\n  return Database;\n}(_ModuleBase2.default);\n\nexports.default = Database;\nvar statics = {\n  ServerValue: _reactNative.NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: _reactNative.NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n  enableLogging: function enableLogging(enabled) {\n    if (_reactNative.NativeModules[MODULE_NAME]) {\n      _reactNative.NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n};\nexports.statics = statics;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/database/index.js"],"names":["NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Database","appOrCustomUrl","customUrl","app","url","firebase","options","databaseURL","endsWith","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_serverTimeOffset","_databaseURL","_transactionHandler","TransactionHandler","persistence","setPersistence","setTimeout","_offsetRef","ref","on","snapshot","val","Date","now","goOnline","goOffline","path","Reference","ModuleBase","statics","ServerValue","NativeModules","RNFirebaseDatabase","TIMESTAMP","serverValueTimestamp","enableLogging","enabled"],"mappings":";;;;;;;;;;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AACA,IAAMA,aAAa,GAAG,CAAC,4BAAD,CAAtB;AAEO,IAAMC,WAAW,GAAG,oBAApB;;AACA,IAAMC,SAAS,GAAG,UAAlB;;;IAKcC,Q;;;;;AACnB,oBAAYC,cAAZ,EAA4BC,SAA5B,EAAuC;AAAA;;AAAA;AACrC,QAAIC,GAAJ;AACA,QAAIC,GAAJ;;AAEA,QAAI,OAAOH,cAAP,KAA0B,QAA9B,EAAwC;AACtCE,MAAAA,GAAG,GAAGE,kBAASF,GAAT,EAAN;AACAC,MAAAA,GAAG,GAAGH,cAAN;AACD,KAHD,MAGO;AACLE,MAAAA,GAAG,GAAGF,cAAN;AACAG,MAAAA,GAAG,GAAGF,SAAS,IAAIC,GAAG,CAACG,OAAJ,CAAYC,WAA/B;AACD;;AAGDH,IAAAA,GAAG,GAAGA,GAAG,CAACI,QAAJ,CAAa,GAAb,IAAoBJ,GAApB,GAA6BA,GAA7B,MAAN;AACA,8BAAMD,GAAN,EAAW;AACTM,MAAAA,MAAM,EAAEZ,aADC;AAETa,MAAAA,UAAU,EAAEZ,WAFH;AAGTa,MAAAA,kBAAkB,EAAE,IAHX;AAITC,MAAAA,mBAAmB,EAAE,IAJZ;AAKTC,MAAAA,SAAS,EAAEd;AALF,KAAX,EAMGK,GANH;AAOA,UAAKU,iBAAL,GAAyB,CAAzB;AACA,UAAKC,YAAL,GAAoBX,GAApB;AACA,UAAKY,mBAAL,GAA2B,IAAIC,oBAAJ,6CAA3B;;AAEA,QAAId,GAAG,CAACG,OAAJ,CAAYY,WAAhB,EAA6B;AAC3B,gFAAsBC,cAAtB,CAAqChB,GAAG,CAACG,OAAJ,CAAYY,WAAjD;AACD;;AAMDE,IAAAA,UAAU,CAAC,YAAM;AACf,YAAKC,UAAL,GAAkB,MAAKC,GAAL,CAAS,wBAAT,CAAlB;;AAEA,YAAKD,UAAL,CAAgBE,EAAhB,CAAmB,OAAnB,EAA4B,UAAAC,QAAQ,EAAI;AACtC,cAAKV,iBAAL,GAAyBU,QAAQ,CAACC,GAAT,MAAkB,MAAKX,iBAAhD;AACD,OAFD;AAGD,KANS,EAMP,CANO,CAAV;AAjCqC;AAwCtC;;;;WAOD,yBAAgB;AACd,aAAO,IAAIY,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,KAAKb,iBAA3B,CAAP;AACD;;;WAMD,oBAAW;AACT,mCAAgB,IAAhB,EAAsBc,QAAtB;AACD;;;WAMD,qBAAY;AACV,mCAAgB,IAAhB,EAAsBC,SAAtB;AACD;;;WAQD,aAAIC,IAAJ,EAAU;AACR,aAAO,IAAIC,kBAAJ,CAAc,IAAd,EAAoBD,IAApB,CAAP;AACD;;;SAOD,eAAkB;AAChB,aAAO,KAAKf,YAAZ;AACD;;;EArFmCiB,oB;;;AAwF/B,IAAMC,OAAO,GAAG;AACrBC,EAAAA,WAAW,EAAEC,2BAAcC,kBAAd,GAAmC;AAC9CC,IAAAA,SAAS,EAAEF,2BAAcC,kBAAd,CAAiCE,oBAAjC,IAAyD;AAClE,aAAO;AAD2D;AADtB,GAAnC,GAIT,EALiB;AAOrBC,EAAAA,aAPqB,yBAOPC,OAPO,EAOE;AACrB,QAAIL,2BAAcrC,WAAd,CAAJ,EAAgC;AAC9BqC,iCAAcrC,WAAd,EAA2ByC,aAA3B,CAAyCC,OAAzC;AACD;AACF;AAXoB,CAAhB","sourcesContent":["/**\n * \n * Database representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport Reference from './Reference';\nimport TransactionHandler from './transaction';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport firebase from '../core/firebase';\nconst NATIVE_EVENTS = ['database_transaction_event' // 'database_server_offset', // TODO\n];\nexport const MODULE_NAME = 'RNFirebaseDatabase';\nexport const NAMESPACE = 'database';\n/**\n * @class Database\n */\n\nexport default class Database extends ModuleBase {\n  constructor(appOrCustomUrl, customUrl) {\n    let app;\n    let url;\n\n    if (typeof appOrCustomUrl === 'string') {\n      app = firebase.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    } // enforce trailing slash\n\n\n    url = url.endsWith('/') ? url : `${url}/`;\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url);\n    this._serverTimeOffset = 0;\n    this._databaseURL = url;\n    this._transactionHandler = new TransactionHandler(this);\n\n    if (app.options.persistence) {\n      getNativeModule(this).setPersistence(app.options.persistence);\n    } // server time listener\n    // setTimeout used to avoid setPersistence race conditions\n    // todo move this and persistence to native side, create a db configure() method natively perhaps?\n    // todo and then native can call setPersistence and then emit offset events\n\n\n    setTimeout(() => {\n      this._offsetRef = this.ref('.info/serverTimeOffset');\n\n      this._offsetRef.on('value', snapshot => {\n        this._serverTimeOffset = snapshot.val() || this._serverTimeOffset;\n      });\n    }, 1);\n  }\n  /**\n   *\n   * @return {Date}\n   */\n\n\n  getServerTime() {\n    return new Date(Date.now() + this._serverTimeOffset);\n  }\n  /**\n   *\n   */\n\n\n  goOnline() {\n    getNativeModule(this).goOnline();\n  }\n  /**\n   *\n   */\n\n\n  goOffline() {\n    getNativeModule(this).goOffline();\n  }\n  /**\n   * Returns a new firebase reference instance\n   * @param path\n   * @returns {Reference}\n   */\n\n\n  ref(path) {\n    return new Reference(this, path);\n  }\n  /**\n   * Returns the database url\n   * @returns {string}\n   */\n\n\n  get databaseUrl() {\n    return this._databaseURL;\n  }\n\n}\nexport const statics = {\n  ServerValue: NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n\n  enableLogging(enabled) {\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"script"}