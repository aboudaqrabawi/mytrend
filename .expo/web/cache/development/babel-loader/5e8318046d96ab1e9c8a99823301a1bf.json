{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _SelectMultiple = _interopRequireDefault(require(\"./SelectMultiple.styles\"));\n\nvar _iconCheckbox = _interopRequireDefault(require(\"../images/icon-checkbox.png\"));\n\nvar _iconCheckboxChecked = _interopRequireDefault(require(\"../images/icon-checkbox-checked.png\"));\n\nvar _style = require(\"./style\");\n\nvar _jsxFileName = \"/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-select-multiple/src/SelectMultiple.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar itemType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({\n  label: _propTypes.default.any,\n  value: _propTypes.default.any\n})]);\n\nvar styleType = _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]);\n\nvar sourceType = _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number]);\n\nvar SelectMultiple = function (_Component) {\n  (0, _inherits2.default)(SelectMultiple, _Component);\n\n  var _super = _createSuper(SelectMultiple);\n\n  function SelectMultiple(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SelectMultiple);\n    _this = _super.call(this, props);\n\n    _this.keyExtractor = function (item, index) {\n      return index.toString();\n    };\n\n    _this.renderLabel = function (label, style, selected) {\n      if (_this.props.renderLabel) {\n        return _this.props.renderLabel(label, style, selected);\n      }\n\n      return _react.default.createElement(_reactNative.Text, {\n        style: style,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }\n      }, label);\n    };\n\n    _this.renderItemRow = function (row) {\n      var _this$props = _this.props,\n          checkboxSource = _this$props.checkboxSource,\n          rowStyle = _this$props.rowStyle,\n          labelStyle = _this$props.labelStyle,\n          checkboxStyle = _this$props.checkboxStyle;\n      var _this$props2 = _this.props,\n          selectedCheckboxSource = _this$props2.selectedCheckboxSource,\n          selectedRowStyle = _this$props2.selectedRowStyle,\n          selectedCheckboxStyle = _this$props2.selectedCheckboxStyle,\n          selectedLabelStyle = _this$props2.selectedLabelStyle;\n\n      if (row.item.selected) {\n        checkboxSource = selectedCheckboxSource;\n        rowStyle = (0, _style.mergeStyles)(_SelectMultiple.default.row, rowStyle, selectedRowStyle);\n        checkboxStyle = (0, _style.mergeStyles)(_SelectMultiple.default.checkbox, checkboxStyle, selectedCheckboxStyle);\n        labelStyle = (0, _style.mergeStyles)(_SelectMultiple.default.label, labelStyle, selectedLabelStyle);\n      } else {\n        rowStyle = (0, _style.mergeStyles)(_SelectMultiple.default.row, rowStyle);\n        checkboxStyle = (0, _style.mergeStyles)(_SelectMultiple.default.checkbox, checkboxStyle);\n        labelStyle = (0, _style.mergeStyles)(_SelectMultiple.default.label, labelStyle);\n      }\n\n      return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: function onPress() {\n          return _this.onRowPress(row.item);\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: rowStyle,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        style: checkboxStyle,\n        source: checkboxSource,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      }), _this.renderLabel(row.item.label, labelStyle, row.item.selected)));\n    };\n\n    _this.state = {\n      dataSource: []\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(SelectMultiple, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var rows = this.getRowData(this.props);\n      this.setState({\n        dataSource: rows\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var rows = this.getRowData(nextProps);\n      this.setState({\n        dataSource: rows\n      });\n    }\n  }, {\n    key: \"getRowData\",\n    value: function getRowData(_ref) {\n      var items = _ref.items,\n          selectedItems = _ref.selectedItems;\n      items = items.map(this.toLabelValueObject);\n      selectedItems = (selectedItems || []).map(this.toLabelValueObject);\n      items.forEach(function (item) {\n        item.selected = selectedItems.some(function (i) {\n          return i.value === item.value;\n        });\n      });\n      return items;\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress(row) {\n      var label = row.label,\n          value = row.value;\n      var _this$props3 = this.props,\n          selectedItems = _this$props3.selectedItems,\n          maxSelect = _this$props3.maxSelect;\n      selectedItems = (selectedItems || []).map(this.toLabelValueObject);\n      var index = selectedItems.findIndex(function (selectedItem) {\n        return selectedItem.value === value;\n      });\n\n      if (index > -1) {\n        selectedItems = selectedItems.filter(function (selectedItem) {\n          return selectedItem.value !== value;\n        });\n      } else {\n        if (maxSelect != null && selectedItems.length >= maxSelect) {\n          return;\n        } else {\n          selectedItems = selectedItems.concat({\n            label: label,\n            value: value\n          });\n        }\n      }\n\n      this.props.onSelectionsChange(selectedItems, {\n        label: label,\n        value: value\n      });\n    }\n  }, {\n    key: \"toLabelValueObject\",\n    value: function toLabelValueObject(obj) {\n      if (Object.prototype.toString.call(obj) === '[object String]') {\n        return {\n          label: obj,\n          value: obj\n        };\n      } else {\n        return {\n          label: obj.label,\n          value: obj.value\n        };\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dataSource = this.state.dataSource;\n      var _this$props4 = this.props,\n          style = _this$props4.style,\n          flatListProps = _this$props4.flatListProps,\n          keyExtractor = _this$props4.keyExtractor;\n      return _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({\n        style: style,\n        keyExtractor: keyExtractor || this.keyExtractor,\n        data: dataSource,\n        renderItem: this.renderItemRow\n      }, flatListProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n  return SelectMultiple;\n}(_react.Component);\n\nexports.default = SelectMultiple;\nSelectMultiple.propTypes = {\n  items: _propTypes.default.arrayOf(itemType).isRequired,\n  selectedItems: _propTypes.default.arrayOf(itemType),\n  maxSelect: _propTypes.default.number,\n  onSelectionsChange: _propTypes.default.func.isRequired,\n  keyExtractor: _propTypes.default.func,\n  checkboxSource: sourceType,\n  selectedCheckboxSource: sourceType,\n  renderLabel: _propTypes.default.func,\n  flatListProps: _propTypes.default.any,\n  style: styleType,\n  rowStyle: styleType,\n  checkboxStyle: styleType,\n  labelStyle: styleType,\n  selectedRowStyle: styleType,\n  selectedCheckboxStyle: styleType,\n  selectedLabelStyle: styleType\n};\nSelectMultiple.defaultProps = {\n  selectedItems: [],\n  style: {},\n  rowStyle: {},\n  checkboxStyle: {},\n  checkboxCheckedStyle: {},\n  labelStyle: {},\n  maxSelect: null,\n  checkboxSource: _iconCheckbox.default,\n  selectedCheckboxSource: _iconCheckboxChecked.default,\n  renderLabel: null\n};","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-select-multiple/src/SelectMultiple.js"],"names":["itemType","PropTypes","oneOfType","string","shape","label","any","value","styleType","object","number","array","sourceType","SelectMultiple","props","keyExtractor","item","index","toString","renderLabel","style","selected","renderItemRow","row","checkboxSource","rowStyle","labelStyle","checkboxStyle","selectedCheckboxSource","selectedRowStyle","selectedCheckboxStyle","selectedLabelStyle","styles","checkbox","onRowPress","state","dataSource","rows","getRowData","setState","nextProps","items","selectedItems","map","toLabelValueObject","forEach","some","i","maxSelect","findIndex","selectedItem","filter","length","concat","onSelectionsChange","obj","Object","prototype","call","flatListProps","Component","propTypes","arrayOf","isRequired","func","defaultProps","checkboxCheckedStyle","checkboxChecked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { View, FlatList, Text, TouchableWithoutFeedback, Image } from 'react-native'\nimport styles from './SelectMultiple.styles'\nimport checkbox from '../images/icon-checkbox.png'\nimport checkboxChecked from '../images/icon-checkbox-checked.png'\nimport { mergeStyles } from './style'\n\nconst itemType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.shape({ label: PropTypes.any, value: PropTypes.any })\n])\n\nconst styleType = PropTypes.oneOfType([\n  PropTypes.object,\n  PropTypes.number,\n  PropTypes.array\n])\n\nconst sourceType = PropTypes.oneOfType([PropTypes.object, PropTypes.number])\n\n// A customiseable FlatList that allows you to select multiple rows\nexport default class SelectMultiple extends Component {\n  static propTypes = {\n    items: PropTypes.arrayOf(itemType).isRequired,\n    selectedItems: PropTypes.arrayOf(itemType),\n    maxSelect: PropTypes.number,\n    onSelectionsChange: PropTypes.func.isRequired,\n    keyExtractor: PropTypes.func,\n\n    checkboxSource: sourceType,\n    selectedCheckboxSource: sourceType,\n    renderLabel: PropTypes.func,\n    flatListProps: PropTypes.any,\n    style: styleType,\n    rowStyle: styleType,\n    checkboxStyle: styleType,\n    labelStyle: styleType,\n\n    selectedRowStyle: styleType,\n    selectedCheckboxStyle: styleType,\n    selectedLabelStyle: styleType\n  }\n\n  static defaultProps = {\n    selectedItems: [],\n    style: {},\n    rowStyle: {},\n    checkboxStyle: {},\n    checkboxCheckedStyle: {},\n    labelStyle: {},\n    maxSelect: null,\n    checkboxSource: checkbox,\n    selectedCheckboxSource: checkboxChecked,\n    renderLabel: null\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { dataSource: [] }\n  }\n\n  componentDidMount () {\n    const rows = this.getRowData(this.props)\n    this.setState({ dataSource: rows })\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const rows = this.getRowData(nextProps)\n    this.setState({ dataSource: rows })\n  }\n\n  getRowData ({ items, selectedItems }) {\n    items = items.map(this.toLabelValueObject)\n    selectedItems = (selectedItems || []).map(this.toLabelValueObject)\n\n    items.forEach((item) => {\n      item.selected = selectedItems.some((i) => i.value === item.value)\n    })\n\n    return items\n  }\n\n  onRowPress (row) {\n    const { label, value } = row\n    let { selectedItems, maxSelect } = this.props\n\n    selectedItems = (selectedItems || []).map(this.toLabelValueObject)\n\n    const index = selectedItems.findIndex((selectedItem) => selectedItem.value === value)\n\n    if (index > -1) {\n      selectedItems = selectedItems.filter((selectedItem) => selectedItem.value !== value)\n    } else {\n      if (maxSelect != null && selectedItems.length >= maxSelect) {\n        return\n      } else {\n        selectedItems = selectedItems.concat({ label, value })\n      }\n    }\n\n    this.props.onSelectionsChange(selectedItems, { label, value })\n  }\n\n  toLabelValueObject (obj) {\n    if (Object.prototype.toString.call(obj) === '[object String]') {\n      return { label: obj, value: obj }\n    } else {\n      return { label: obj.label, value: obj.value }\n    }\n  }\n\n  keyExtractor = (item, index) => index.toString()\n\n  render () {\n    const { dataSource } = this.state\n    const { style, flatListProps, keyExtractor } = this.props\n    return (\n      <FlatList\n        style={style}\n        keyExtractor={keyExtractor || this.keyExtractor}\n        data={dataSource}\n        renderItem={this.renderItemRow}\n        {...flatListProps}\n      />\n    )\n  }\n\n  renderLabel = (label, style, selected) => {\n    if (this.props.renderLabel) {\n      return this.props.renderLabel(label, style, selected)\n    }\n    return (\n      <Text style={style}>{label}</Text>\n    )\n  }\n\n  renderItemRow = (row) => {\n    let {\n      checkboxSource,\n      rowStyle,\n      labelStyle,\n      checkboxStyle\n    } = this.props\n\n    const {\n      selectedCheckboxSource,\n      selectedRowStyle,\n      selectedCheckboxStyle,\n      selectedLabelStyle\n    } = this.props\n\n    if (row.item.selected) {\n      checkboxSource = selectedCheckboxSource\n      rowStyle = mergeStyles(styles.row, rowStyle, selectedRowStyle)\n      checkboxStyle = mergeStyles(styles.checkbox, checkboxStyle, selectedCheckboxStyle)\n      labelStyle = mergeStyles(styles.label, labelStyle, selectedLabelStyle)\n    } else {\n      rowStyle = mergeStyles(styles.row, rowStyle)\n      checkboxStyle = mergeStyles(styles.checkbox, checkboxStyle)\n      labelStyle = mergeStyles(styles.label, labelStyle)\n    }\n\n    return (\n      <TouchableWithoutFeedback onPress={() => this.onRowPress(row.item)}>\n        <View style={rowStyle}>\n          <Image style={checkboxStyle} source={checkboxSource} />\n          {this.renderLabel(row.item.label, labelStyle, row.item.selected)}\n        </View>\n      </TouchableWithoutFeedback>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}