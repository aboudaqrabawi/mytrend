{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _utils = require(\"./utils\");\n\nvar _serialize = require(\"./utils/serialize\");\n\nvar _DocumentSnapshot = _interopRequireDefault(require(\"./DocumentSnapshot\"));\n\nvar _native = require(\"../../utils/native\");\n\nvar Transaction = function () {\n  function Transaction(firestore, meta) {\n    (0, _classCallCheck2.default)(this, Transaction);\n    this._meta = meta;\n    this._commandBuffer = [];\n    this._firestore = firestore;\n    this._pendingResult = undefined;\n  }\n\n  (0, _createClass2.default)(Transaction, [{\n    key: \"_prepare\",\n    value: function _prepare() {\n      this._commandBuffer = [];\n      this._pendingResult = undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get(documentRef) {\n      var _this = this;\n\n      return (0, _native.getNativeModule)(this._firestore).transactionGetDocument(this._meta.id, documentRef.path).then(function (result) {\n        return new _DocumentSnapshot.default(_this._firestore, result);\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      this._commandBuffer.push({\n        type: 'set',\n        path: documentRef.path,\n        data: (0, _serialize.buildNativeMap)(data),\n        options: options || {}\n      });\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var data = (0, _utils.parseUpdateArgs)(args, 'Transaction.update');\n\n      this._commandBuffer.push({\n        type: 'update',\n        path: documentRef.path,\n        data: (0, _serialize.buildNativeMap)(data)\n      });\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      this._commandBuffer.push({\n        type: 'delete',\n        path: documentRef.path\n      });\n\n      return this;\n    }\n  }]);\n  return Transaction;\n}();\n\nexports.default = Transaction;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/firestore/Transaction.js"],"names":["Transaction","firestore","meta","_meta","_commandBuffer","_firestore","_pendingResult","undefined","documentRef","transactionGetDocument","id","path","then","result","DocumentSnapshot","data","options","push","type","args"],"mappings":";;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;IAOqBA,W;AACnB,uBAAYC,SAAZ,EAAuBC,IAAvB,EAA6B;AAAA;AAC3B,SAAKC,KAAL,GAAaD,IAAb;AACA,SAAKE,cAAL,GAAsB,EAAtB;AACA,SAAKC,UAAL,GAAkBJ,SAAlB;AACA,SAAKK,cAAL,GAAsBC,SAAtB;AACD;;;;WAeD,oBAAW;AACT,WAAKH,cAAL,GAAsB,EAAtB;AACA,WAAKE,cAAL,GAAsBC,SAAtB;AACD;;;WAgBD,aAAIC,WAAJ,EAAiB;AAAA;;AAEf,aAAO,6BAAgB,KAAKH,UAArB,EAAiCI,sBAAjC,CAAwD,KAAKN,KAAL,CAAWO,EAAnE,EAAuEF,WAAW,CAACG,IAAnF,EAAyFC,IAAzF,CAA8F,UAAAC,MAAM;AAAA,eAAI,IAAIC,yBAAJ,CAAqB,KAAI,CAACT,UAA1B,EAAsCQ,MAAtC,CAAJ;AAAA,OAApG,CAAP;AACD;;;WAgBD,aAAIL,WAAJ,EAAiBO,IAAjB,EAAuBC,OAAvB,EAAgC;AAG9B,WAAKZ,cAAL,CAAoBa,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,KADiB;AAEvBP,QAAAA,IAAI,EAAEH,WAAW,CAACG,IAFK;AAGvBI,QAAAA,IAAI,EAAE,+BAAeA,IAAf,CAHiB;AAIvBC,QAAAA,OAAO,EAAEA,OAAO,IAAI;AAJG,OAAzB;;AAOA,aAAO,IAAP;AACD;;;WAeD,gBAAOR,WAAP,EAA6B;AAAA,wCAANW,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAE3B,UAAMJ,IAAI,GAAG,4BAAgBI,IAAhB,EAAsB,oBAAtB,CAAb;;AAEA,WAAKf,cAAL,CAAoBa,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,QADiB;AAEvBP,QAAAA,IAAI,EAAEH,WAAW,CAACG,IAFK;AAGvBI,QAAAA,IAAI,EAAE,+BAAeA,IAAf;AAHiB,OAAzB;;AAMA,aAAO,IAAP;AACD;;;WAUD,iBAAOP,WAAP,EAAoB;AAElB,WAAKJ,cAAL,CAAoBa,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,QADiB;AAEvBP,QAAAA,IAAI,EAAEH,WAAW,CAACG;AAFK,OAAzB;;AAKA,aAAO,IAAP;AACD","sourcesContent":["/**\n * \n * Firestore Transaction representation wrapper\n */\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport { getNativeModule } from '../../utils/native';\n// TODO docs state all get requests must be made FIRST before any modifications\n// TODO so need to validate that\n\n/**\n * @class Transaction\n */\nexport default class Transaction {\n  constructor(firestore, meta) {\n    this._meta = meta;\n    this._commandBuffer = [];\n    this._firestore = firestore;\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   * INTERNAL API\n   * -------------\n   */\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n\n\n  _prepare() {\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be retrieved. Value must not be null.\n   *\n   * @returns Promise<DocumentSnapshot>\n   */\n\n\n  get(documentRef) {\n    // todo validate doc ref\n    return getNativeModule(this._firestore).transactionGetDocument(this._meta.id, documentRef.path).then(result => new DocumentSnapshot(this._firestore, result));\n  }\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   *\n   * @param documentRef DocumentReference A reference to the document to be created. Value must not be null.\n   * @param data Object An object of the fields and values for the document.\n   * @param options SetOptions An object to configure the set behavior.\n   *        Pass {merge: true} to only replace the values specified in the data argument.\n   *        Fields omitted will remain untouched.\n   *\n   * @returns {Transaction}\n   */\n\n\n  set(documentRef, data, options) {\n    // todo validate doc ref\n    // todo validate data is object\n    this._commandBuffer.push({\n      type: 'set',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n      options: options || {}\n    });\n\n    return this;\n  }\n  /**\n   * Updates fields in the document referred to by this DocumentReference.\n   * The update will fail if applied to a document that does not exist. Nested\n   * fields can be updated by providing dot-separated field path strings or by providing FieldPath objects.\n   *\n   * @param documentRef DocumentReference A reference to the document to be updated. Value must not be null.\n   * @param args any Either an object containing all of the fields and values to update,\n   *        or a series of arguments alternating between fields (as string or FieldPath\n   *        objects) and values.\n   *\n   * @returns {Transaction}\n   */\n\n\n  update(documentRef, ...args) {\n    // todo validate doc ref\n    const data = parseUpdateArgs(args, 'Transaction.update');\n\n    this._commandBuffer.push({\n      type: 'update',\n      path: documentRef.path,\n      data: buildNativeMap(data)\n    });\n\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be deleted. Value must not be null.\n   *\n   * @returns {Transaction}\n   */\n\n\n  delete(documentRef) {\n    // todo validate doc ref\n    this._commandBuffer.push({\n      type: 'delete',\n      path: documentRef.path\n    });\n\n    return this;\n  }\n\n}"]},"metadata":{},"sourceType":"script"}