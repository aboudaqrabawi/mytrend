{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseNativeMap = exports.buildTypeMap = exports.buildNativeArray = exports.buildNativeMap = void 0;\n\nvar _DocumentReference = _interopRequireDefault(require(\"../DocumentReference\"));\n\nvar _Blob = _interopRequireDefault(require(\"../Blob\"));\n\nvar _FieldPath = require(\"../FieldPath\");\n\nvar _FieldValue = _interopRequireDefault(require(\"../FieldValue\"));\n\nvar _GeoPoint = _interopRequireDefault(require(\"../GeoPoint\"));\n\nvar _Path = _interopRequireDefault(require(\"../Path\"));\n\nvar _utils = require(\"../../../utils\");\n\nvar _Timestamp = _interopRequireDefault(require(\"../Timestamp\"));\n\nvar buildNativeMap = function buildNativeMap(data) {\n  var nativeData = {};\n\n  if (data) {\n    Object.keys(data).forEach(function (key) {\n      var typeMap = buildTypeMap(data[key]);\n\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    });\n  }\n\n  return nativeData;\n};\n\nexports.buildNativeMap = buildNativeMap;\n\nvar buildNativeArray = function buildNativeArray(array) {\n  var nativeArray = [];\n\n  if (array) {\n    array.forEach(function (value) {\n      var typeMap = buildTypeMap(value);\n\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    });\n  }\n\n  return nativeArray;\n};\n\nexports.buildNativeArray = buildNativeArray;\n\nvar buildTypeMap = function buildTypeMap(value) {\n  var type = (0, _utils.typeOf)(value);\n\n  if (Number.isNaN(value)) {\n    return {\n      type: 'nan',\n      value: null\n    };\n  }\n\n  if (value === Infinity) {\n    return {\n      type: 'infinity',\n      value: null\n    };\n  }\n\n  if (value === null || value === undefined) {\n    return {\n      type: 'null',\n      value: null\n    };\n  }\n\n  if (value === _FieldPath.DOCUMENT_ID) {\n    return {\n      type: 'documentid',\n      value: null\n    };\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return {\n      type: type,\n      value: value\n    };\n  }\n\n  if (type === 'array') {\n    return {\n      type: type,\n      value: buildNativeArray(value)\n    };\n  }\n\n  if (type === 'object') {\n    if (value instanceof _DocumentReference.default) {\n      return {\n        type: 'reference',\n        value: value.path\n      };\n    }\n\n    if (value instanceof _GeoPoint.default) {\n      return {\n        type: 'geopoint',\n        value: {\n          latitude: value.latitude,\n          longitude: value.longitude\n        }\n      };\n    }\n\n    if (value instanceof _Timestamp.default) {\n      return {\n        type: 'timestamp',\n        value: {\n          seconds: value.seconds,\n          nanoseconds: value.nanoseconds\n        }\n      };\n    }\n\n    if (value instanceof Date) {\n      return {\n        type: 'date',\n        value: value.getTime()\n      };\n    }\n\n    if (value instanceof _Blob.default) {\n      return {\n        type: 'blob',\n        value: value.toBase64()\n      };\n    }\n\n    if (value instanceof _FieldValue.default) {\n      return {\n        type: 'fieldvalue',\n        value: {\n          elements: value.elements,\n          type: value.type\n        }\n      };\n    }\n\n    return {\n      type: 'object',\n      value: buildNativeMap(value)\n    };\n  }\n\n  console.warn(\"Unknown data type received \" + type);\n  return null;\n};\n\nexports.buildTypeMap = buildTypeMap;\n\nvar parseNativeMap = function parseNativeMap(firestore, nativeData) {\n  var data;\n\n  if (nativeData) {\n    data = {};\n    Object.keys(nativeData).forEach(function (key) {\n      data[key] = parseTypeMap(firestore, nativeData[key]);\n    });\n  }\n\n  return data;\n};\n\nexports.parseNativeMap = parseNativeMap;\n\nvar parseNativeArray = function parseNativeArray(firestore, nativeArray) {\n  var array = [];\n\n  if (nativeArray) {\n    nativeArray.forEach(function (typeMap) {\n      array.push(parseTypeMap(firestore, typeMap));\n    });\n  }\n\n  return array;\n};\n\nvar parseTypeMap = function parseTypeMap(firestore, typeMap) {\n  var type = typeMap.type,\n      value = typeMap.value;\n\n  if (type === 'null') {\n    return null;\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return value;\n  }\n\n  if (type === 'array') {\n    return parseNativeArray(firestore, value);\n  }\n\n  if (type === 'object') {\n    return parseNativeMap(firestore, value);\n  }\n\n  if (type === 'reference') {\n    return new _DocumentReference.default(firestore, _Path.default.fromName(value));\n  }\n\n  if (type === 'geopoint') {\n    return new _GeoPoint.default(value.latitude, value.longitude);\n  }\n\n  if (type === 'timestamp') {\n    return new _Timestamp.default(value.seconds, value.nanoseconds);\n  }\n\n  if (type === 'date') {\n    return new Date(value);\n  }\n\n  if (type === 'blob') {\n    return _Blob.default.fromBase64String(value);\n  }\n\n  if (type === 'infinity') {\n    return Infinity;\n  }\n\n  if (type === 'nan') {\n    return NaN;\n  }\n\n  console.warn(\"Unknown data type received \" + type);\n  return value;\n};","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/firestore/utils/serialize.js"],"names":["buildNativeMap","data","nativeData","Object","keys","forEach","key","typeMap","buildTypeMap","buildNativeArray","array","nativeArray","value","push","type","Number","isNaN","Infinity","undefined","DOCUMENT_ID","DocumentReference","path","GeoPoint","latitude","longitude","Timestamp","seconds","nanoseconds","Date","getTime","Blob","toBase64","FieldValue","elements","console","warn","parseNativeMap","firestore","parseTypeMap","parseNativeArray","Path","fromName","fromBase64String","NaN"],"mappings":"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","sourcesContent":["import DocumentReference from '../DocumentReference';\nimport Blob from '../Blob';\nimport { DOCUMENT_ID } from '../FieldPath';\nimport FieldValue from '../FieldValue';\nimport GeoPoint from '../GeoPoint';\nimport Path from '../Path';\nimport { typeOf } from '../../../utils';\nimport Timestamp from '../Timestamp';\n/*\n * Functions that build up the data needed to represent\n * the different types available within Firestore\n * for transmission to the native side\n */\n\nexport const buildNativeMap = data => {\n  const nativeData = {};\n\n  if (data) {\n    Object.keys(data).forEach(key => {\n      const typeMap = buildTypeMap(data[key]);\n\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    });\n  }\n\n  return nativeData;\n};\nexport const buildNativeArray = array => {\n  const nativeArray = [];\n\n  if (array) {\n    array.forEach(value => {\n      const typeMap = buildTypeMap(value);\n\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    });\n  }\n\n  return nativeArray;\n};\nexport const buildTypeMap = value => {\n  const type = typeOf(value);\n\n  if (Number.isNaN(value)) {\n    return {\n      type: 'nan',\n      value: null\n    };\n  }\n\n  if (value === Infinity) {\n    return {\n      type: 'infinity',\n      value: null\n    };\n  }\n\n  if (value === null || value === undefined) {\n    return {\n      type: 'null',\n      value: null\n    };\n  }\n\n  if (value === DOCUMENT_ID) {\n    return {\n      type: 'documentid',\n      value: null\n    };\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return {\n      type,\n      value\n    };\n  }\n\n  if (type === 'array') {\n    return {\n      type,\n      value: buildNativeArray(value)\n    };\n  }\n\n  if (type === 'object') {\n    if (value instanceof DocumentReference) {\n      return {\n        type: 'reference',\n        value: value.path\n      };\n    }\n\n    if (value instanceof GeoPoint) {\n      return {\n        type: 'geopoint',\n        value: {\n          latitude: value.latitude,\n          longitude: value.longitude\n        }\n      };\n    }\n\n    if (value instanceof Timestamp) {\n      return {\n        type: 'timestamp',\n        value: {\n          seconds: value.seconds,\n          nanoseconds: value.nanoseconds\n        }\n      };\n    }\n\n    if (value instanceof Date) {\n      return {\n        type: 'date',\n        value: value.getTime()\n      };\n    }\n\n    if (value instanceof Blob) {\n      return {\n        type: 'blob',\n        value: value.toBase64()\n      };\n    } // TODO: Salakar: Refactor in v6 - add internal `type` flag\n\n\n    if (value instanceof FieldValue) {\n      return {\n        type: 'fieldvalue',\n        value: {\n          elements: value.elements,\n          type: value.type\n        }\n      };\n    }\n\n    return {\n      type: 'object',\n      value: buildNativeMap(value)\n    };\n  }\n\n  console.warn(`Unknown data type received ${type}`);\n  return null;\n};\n/*\n * Functions that parse the received from the native\n * side and converts to the correct Firestore JS types\n */\n\nexport const parseNativeMap = (firestore, nativeData) => {\n  let data;\n\n  if (nativeData) {\n    data = {};\n    Object.keys(nativeData).forEach(key => {\n      data[key] = parseTypeMap(firestore, nativeData[key]);\n    });\n  }\n\n  return data;\n};\n\nconst parseNativeArray = (firestore, nativeArray) => {\n  const array = [];\n\n  if (nativeArray) {\n    nativeArray.forEach(typeMap => {\n      array.push(parseTypeMap(firestore, typeMap));\n    });\n  }\n\n  return array;\n};\n\nconst parseTypeMap = (firestore, typeMap) => {\n  const {\n    type,\n    value\n  } = typeMap;\n\n  if (type === 'null') {\n    return null;\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return value;\n  }\n\n  if (type === 'array') {\n    return parseNativeArray(firestore, value);\n  }\n\n  if (type === 'object') {\n    return parseNativeMap(firestore, value);\n  }\n\n  if (type === 'reference') {\n    return new DocumentReference(firestore, Path.fromName(value));\n  }\n\n  if (type === 'geopoint') {\n    return new GeoPoint(value.latitude, value.longitude);\n  }\n\n  if (type === 'timestamp') {\n    return new Timestamp(value.seconds, value.nanoseconds);\n  }\n\n  if (type === 'date') {\n    return new Date(value);\n  }\n\n  if (type === 'blob') {\n    return Blob.fromBase64String(value);\n  }\n\n  if (type === 'infinity') {\n    return Infinity;\n  }\n\n  if (type === 'nan') {\n    return NaN;\n  }\n\n  console.warn(`Unknown data type received ${type}`);\n  return value;\n};"]},"metadata":{},"sourceType":"script"}