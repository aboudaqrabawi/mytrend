{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactNativeImageCropPicker = _interopRequireDefault(require(\"react-native-image-crop-picker\"));\n\nvar _colors = require(\"../../../assets/colors\");\n\nvar _jsxFileName = \"/Users/alheresh/trend-mobile/my-trend-new/src/screens/Register/RegisterScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar RegisterScreen = function (_Component) {\n  (0, _inherits2.default)(RegisterScreen, _Component);\n\n  var _super = _createSuper(RegisterScreen);\n\n  function RegisterScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RegisterScreen);\n    _this = _super.call(this, props);\n    _this.state = {\n      showProgress: false,\n      userName: '',\n      name: '',\n      email: '',\n      phone: '',\n      password: '',\n      major: '',\n      uploadedImg: ''\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(RegisterScreen, [{\n    key: \"uploadImg\",\n    value: function uploadImg() {\n      var _this2 = this;\n\n      return _regenerator.default.async(function uploadImg$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _reactNativeImageCropPicker.default.openPicker({\n                width: 300,\n                height: 400,\n                cropping: true,\n                includeBase64: true\n              }).then(function (image) {\n                console.log(image);\n\n                _this2.setState({\n                  uploadedImg: image\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"error\",\n    value: function error(msg) {\n      if (_reactNative.Platform.OS === 'android') {\n        _reactNative.ToastAndroid.show(msg, _reactNative.ToastAndroid.LONG);\n      } else {\n        _reactNative.AlertIOS.alert(msg);\n      }\n    }\n  }, {\n    key: \"Register\",\n    value: function Register() {\n      if (this.state.userName != '' && this.state.name != '' && this.state.password != '' && this.state.password2 != '' && this.state.phone != '') {\n        if (this.state.password == this.state.password2) {\n          this.props.navigation.navigate('SelectInterestings', {\n            name: this.state.name,\n            userName: this.state.userName,\n            email: this.state.email,\n            major: this.state.major,\n            password: this.state.password,\n            phone: this.state.phone,\n            image: 'data:' + this.state.uploadedImg.mime + ';base64,' + this.state.uploadedImg.data,\n            ext: this.state.uploadedImg.mime\n          });\n        } else {\n          this.error(strings.passwordNotMatch);\n        }\n      } else {\n        this.error(strings.errorTxt);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return _react.default.createElement(_reactNativeGestureHandler.ScrollView, {\n        style: {\n          backgroundColor: _colors.white\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.StatusBar, {\n        barStyle: \"light-content\",\n        backgroundColor: _colors.gray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: styles.loginView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n        onPress: function onPress() {\n          return _this3.uploadImg();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, this.state.uploadedImg == '' && _react.default.createElement(_reactNative.Image, {\n        source: require('../../../assets/images/user.png'),\n        style: styles.userImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }), this.state.uploadedImg != '' && _react.default.createElement(_reactNative.Image, {\n        source: {\n          uri: \"data:\" + this.state.uploadedImg.mime + \";base64,\" + this.state.uploadedImg.data\n        },\n        style: styles.proImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }))), this.state.uploadedImg == '' && _react.default.createElement(_reactNative.Text, {\n        style: styles.uploadTxt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, strings.uploadImg), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.userName + ' @',\n        placeholderTextColor: _colors.gray,\n        onChangeText: function onChangeText(text) {\n          return _this3.setState({\n            userName: text\n          });\n        },\n        defaultValue: this.state.userName,\n        returnKeyType: \"next\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.name,\n        placeholderTextColor: _colors.gray,\n        onChangeText: function onChangeText(text) {\n          return _this3.setState({\n            name: text\n          });\n        },\n        defaultValue: this.state.name,\n        returnKeyType: \"next\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.email,\n        placeholderTextColor: _colors.gray,\n        onChangeText: function onChangeText(text) {\n          return _this3.setState({\n            email: text\n          });\n        },\n        defaultValue: this.state.email,\n        returnKeyType: \"next\",\n        keyboardType: \"email-address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.major,\n        placeholderTextColor: _colors.gray,\n        onChangeText: function onChangeText(text) {\n          return _this3.setState({\n            major: text\n          });\n        },\n        defaultValue: this.state.major,\n        returnKeyType: \"next\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.Password,\n        placeholderTextColor: _colors.gray,\n        onChangeText: function onChangeText(text) {\n          return _this3.setState({\n            password: text\n          });\n        },\n        defaultValue: this.state.password,\n        returnKeyType: \"next\",\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.ConfirmPassword,\n        placeholderTextColor: _colors.gray,\n        onChangeText: function onChangeText(text) {\n          return _this3.setState({\n            password2: text\n          });\n        },\n        defaultValue: this.state.password2,\n        returnKeyType: \"next\",\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.Phone,\n        placeholderTextColor: _colors.gray,\n        onChangeText: function onChangeText(text) {\n          return _this3.setState({\n            phone: text\n          });\n        },\n        defaultValue: this.state.phone,\n        returnKeyType: \"next\",\n        keyboardType: \"phone-pad\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: styles.btn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n        onPress: function onPress() {\n          return _this3.Register();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.btnView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: styles.txt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }\n      }, strings.create))))));\n    }\n  }]);\n  return RegisterScreen;\n}(_react.Component);\n\nexports.default = RegisterScreen;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/src/screens/Register/RegisterScreen.js"],"names":["RegisterScreen","props","state","showProgress","userName","name","email","phone","password","major","uploadedImg","ImagePicker","openPicker","width","height","cropping","includeBase64","then","image","console","log","setState","msg","Platform","OS","ToastAndroid","show","LONG","AlertIOS","alert","password2","navigation","navigate","mime","data","ext","error","strings","passwordNotMatch","errorTxt","backgroundColor","white","gray","styles","loginView","uploadImg","require","userImg","uri","proImg","uploadTxt","textInput","text","Password","ConfirmPassword","Phone","btn","Register","btnView","txt","create","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  View,\n  Image,\n  StatusBar,\n  Text,\n  TextInput,\n  ToastAndroid,\n  Platform,\n  AlertIOS,\n} from 'react-native';\nimport { ScrollView, TouchableOpacity } from 'react-native-gesture-handler';\nimport ImagePicker from 'react-native-image-crop-picker';\nimport { white, gray } from '../../../assets/colors';\n\nexport default class RegisterScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showProgress: false,\n      userName: '',\n      name: '',\n      email: '',\n      phone: '',\n      password: '',\n      major: '',\n      uploadedImg: '',\n    };\n  }\n  async uploadImg() {\n    ImagePicker.openPicker({\n      width: 300,\n      height: 400,\n      cropping: true,\n      includeBase64: true,\n    }).then((image) => {\n      console.log(image);\n      this.setState({\n        uploadedImg: image,\n      });\n    });\n  }\n  error(msg) {\n    if (Platform.OS === 'android') {\n      ToastAndroid.show(msg, ToastAndroid.LONG);\n    } else {\n      AlertIOS.alert(msg);\n    }\n  }\n  Register() {\n    if (\n      this.state.userName != '' &&\n      this.state.name != '' &&\n      this.state.password != '' &&\n      this.state.password2 != '' &&\n      this.state.phone != ''\n    ) {\n      if (this.state.password == this.state.password2) {\n        this.props.navigation.navigate('SelectInterestings', {\n          name: this.state.name,\n          userName: this.state.userName,\n          email: this.state.email,\n          major: this.state.major,\n          password: this.state.password,\n          phone: this.state.phone,\n          image: 'data:' + this.state.uploadedImg.mime + ';base64,' + this.state.uploadedImg.data,\n          ext: this.state.uploadedImg.mime,\n        });\n      } else {\n        this.error(strings.passwordNotMatch);\n      }\n    } else {\n      this.error(strings.errorTxt);\n    }\n  }\n  render() {\n    return (\n      <ScrollView style={{ backgroundColor: white }}>\n        <StatusBar barStyle=\"light-content\" backgroundColor={gray} />\n        <View style={styles.loginView}>\n          <View>\n            <TouchableOpacity onPress={() => this.uploadImg()}>\n              {this.state.uploadedImg == '' && (\n                <Image\n                  source={require('../../../assets/images/user.png')}\n                  style={styles.userImg}\n                />\n              )}\n              {this.state.uploadedImg != '' && (\n                <Image\n                  source={{\n                    uri: `data:${this.state.uploadedImg.mime};base64,${this.state.uploadedImg.data}`,\n                  }}\n                  style={styles.proImg}\n                />\n              )}\n            </TouchableOpacity>\n          </View>\n\n          {this.state.uploadedImg == '' && (\n            <Text style={styles.uploadTxt}>{strings.uploadImg}</Text>\n          )}\n\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.userName + ' @'}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({ userName: text })}\n            defaultValue={this.state.userName}\n            returnKeyType=\"next\"\n          />\n\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.name}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({ name: text })}\n            defaultValue={this.state.name}\n            returnKeyType=\"next\"\n          />\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.email}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({ email: text })}\n            defaultValue={this.state.email}\n            returnKeyType=\"next\"\n            keyboardType=\"email-address\"\n          />\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.major}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({ major: text })}\n            defaultValue={this.state.major}\n            returnKeyType=\"next\"\n          />\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.Password}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({ password: text })}\n            defaultValue={this.state.password}\n            returnKeyType=\"next\"\n            secureTextEntry={true}\n          />\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.ConfirmPassword}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({ password2: text })}\n            defaultValue={this.state.password2}\n            returnKeyType=\"next\"\n            secureTextEntry={true}\n          />\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.Phone}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({ phone: text })}\n            defaultValue={this.state.phone}\n            returnKeyType=\"next\"\n            keyboardType=\"phone-pad\"\n          />\n          <View style={styles.btn}>\n            <TouchableOpacity onPress={() => this.Register()}>\n              <View style={styles.btnView}>\n                <Text style={styles.txt}>{strings.create}</Text>\n              </View>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}