{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _index = require(\"../../../assets/colors/index\");\n\nvar _Config = _interopRequireDefault(require(\"../../../assets/Config\"));\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _LoaderBox = _interopRequireDefault(require(\"../../components/LoaderBox\"));\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _jsxFileName = \"/Users/alheresh/trend-mobile/my-trend-new/src/screens/Login/LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar LoginScreen = function (_Component) {\n  (0, _inherits2.default)(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, LoginScreen);\n    _this = _super.call(this, props);\n    _this.state = {\n      showProgress: false,\n      email: '',\n      password: ''\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(LoginScreen, [{\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      if (this.state.showProgress) {\n        return _react.default.createElement(_LoaderBox.default, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }, {\n    key: \"Login\",\n    value: function Login() {\n      var fcmToken, response, res;\n      return _regenerator.default.async(function Login$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(_asyncStorage.default.getItem('fcmToken'));\n\n            case 2:\n              fcmToken = _context.sent;\n              console.log(fcmToken);\n\n              if (!(this.state.password != '' && this.state.email != '')) {\n                _context.next = 30;\n                break;\n              }\n\n              this.setState({\n                showProgress: true\n              });\n              _context.prev = 6;\n              _context.next = 9;\n              return _regenerator.default.awrap(fetch(_Config.default.DOMAIN + 'login', {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  email: this.state.email,\n                  password: this.state.password,\n                  fcm_token: fcmToken\n                })\n              }));\n\n            case 9:\n              response = _context.sent;\n              _context.next = 12;\n              return _regenerator.default.awrap(response.json());\n\n            case 12:\n              res = _context.sent;\n              console.log('res', res);\n\n              if (!(res.status == 400)) {\n                _context.next = 18;\n                break;\n              }\n\n              this.error(res.messg);\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.next = 20;\n              return _regenerator.default.awrap(_asyncStorage.default.setItem('@Trend:token', res.user[0].api_token));\n\n            case 20:\n              this.props.navigation.navigate('TrendsScreen');\n\n            case 21:\n              this.setState({\n                showProgress: false\n              });\n              _context.next = 28;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](6);\n              console.log(_context.t0);\n              this.setState({\n                showProgress: false\n              });\n\n            case 28:\n              _context.next = 31;\n              break;\n\n            case 30:\n              this.error(strings.errorTxt);\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[6, 24]], Promise);\n    }\n  }, {\n    key: \"error\",\n    value: function error(msg) {\n      if (_reactNative.Platform.OS === 'android') {\n        _reactNative.ToastAndroid.show(msg, _reactNative.ToastAndroid.LONG);\n      } else {\n        _reactNative.AlertIOS.alert(msg);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_reactNativeGestureHandler.ScrollView, {\n        style: {\n          backgroundColor: _index.white\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.StatusBar, {\n        barStyle: \"light-content\",\n        backgroundColor: _index.gray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }), this.renderLoading(), _react.default.createElement(_reactNative.View, {\n        style: styles.loginView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        source: require('../../../assets/images/login.png'),\n        style: styles.loginImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholder: strings.userName,\n        placeholderTextColor: _index.gray,\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            email: text\n          });\n        },\n        defaultValue: this.state.email,\n        returnKeyType: \"next\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: styles.textInput,\n        placeholderTextColor: _index.gray,\n        placeholder: strings.Password,\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            password: text\n          });\n        },\n        defaultValue: this.state.password,\n        returnKeyType: \"go\",\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: styles.buttonsView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.Login();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.btnView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: styles.txt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }, strings.login))), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('Register');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.btnView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: styles.txt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, strings.create))))));\n    }\n  }]);\n  return LoginScreen;\n}(_react.Component);\n\nexports.default = LoginScreen;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/src/screens/Login/LoginScreen.js"],"names":["LoginScreen","props","state","showProgress","email","password","AsyncStorage","getItem","fcmToken","console","log","setState","fetch","config","DOMAIN","method","headers","Accept","body","JSON","stringify","fcm_token","response","json","res","status","error","messg","setItem","user","api_token","navigation","navigate","strings","errorTxt","msg","Platform","OS","ToastAndroid","show","LONG","AlertIOS","alert","backgroundColor","white","gray","renderLoading","styles","loginView","require","loginImg","textInput","userName","text","Password","buttonsView","Login","btnView","txt","login","create","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAUA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAEqBA,W;;;;;AACnB,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,KADH;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAFiB;AAOlB;;;;WACD,yBAAgB;AACd,UAAI,KAAKH,KAAL,CAAWC,YAAf,EAA6B;AAC3B,eAAO,6BAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF;;;WACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACuBG,sBAAaC,OAAb,CAAqB,UAArB,CADvB;;AAAA;AACMC,cAAAA,QADN;AAEEC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAFF,oBAGM,KAAKN,KAAL,CAAWG,QAAX,IAAuB,EAAvB,IAA6B,KAAKH,KAAL,CAAWE,KAAX,IAAoB,EAHvD;AAAA;AAAA;AAAA;;AAII,mBAAKO,QAAL,CAAc;AAACR,gBAAAA,YAAY,EAAE;AAAf,eAAd;AAJJ;AAAA;AAAA,gDAM2BS,KAAK,CAACC,gBAAOC,MAAP,GAAgB,OAAjB,EAA0B;AAClDC,gBAAAA,MAAM,EAAE,MAD0C;AAElDC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,MAAM,EAAE,kBADD;AAEP,kCAAgB;AAFT,iBAFyC;AAMlDC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBhB,kBAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KADC;AAEnBC,kBAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QAFF;AAGnBgB,kBAAAA,SAAS,EAAEb;AAHQ,iBAAf;AAN4C,eAA1B,CANhC;;AAAA;AAMUc,cAAAA,QANV;AAAA;AAAA,gDAkBsBA,QAAQ,CAACC,IAAT,EAlBtB;;AAAA;AAkBUC,cAAAA,GAlBV;AAmBMf,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBc,GAAnB;;AAnBN,oBAoBUA,GAAG,CAACC,MAAJ,IAAc,GApBxB;AAAA;AAAA;AAAA;;AAqBQ,mBAAKC,KAAL,CAAWF,GAAG,CAACG,KAAf;AArBR;AAAA;;AAAA;AAAA;AAAA,gDAuBcrB,sBAAasB,OAAb,CAAqB,cAArB,EAAqCJ,GAAG,CAACK,IAAJ,CAAS,CAAT,EAAYC,SAAjD,CAvBd;;AAAA;AAwBQ,mBAAK7B,KAAL,CAAW8B,UAAX,CAAsBC,QAAtB,CAA+B,cAA/B;;AAxBR;AA0BM,mBAAKrB,QAAL,CAAc;AAACR,gBAAAA,YAAY,EAAE;AAAf,eAAd;AA1BN;AAAA;;AAAA;AAAA;AAAA;AA4BMM,cAAAA,OAAO,CAACC,GAAR;AACA,mBAAKC,QAAL,CAAc;AAACR,gBAAAA,YAAY,EAAE;AAAf,eAAd;;AA7BN;AAAA;AAAA;;AAAA;AAgCI,mBAAKuB,KAAL,CAAWO,OAAO,CAACC,QAAnB;;AAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAmCA,eAAMC,GAAN,EAAW;AACT,UAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7BC,kCAAaC,IAAb,CAAkBJ,GAAlB,EAAuBG,0BAAaE,IAApC;AACD,OAFD,MAEO;AACLC,8BAASC,KAAT,CAAeP,GAAf;AACD;AACF;;;WACD,kBAAS;AAAA;;AACP,aACE,6BAAC,qCAAD;AAAY,QAAA,KAAK,EAAE;AAACQ,UAAAA,eAAe,EAAEC;AAAlB,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,sBAAD;AAAW,QAAA,QAAQ,EAAC,eAApB;AAAoC,QAAA,eAAe,EAAEC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKC,aAAL,EAFH,EAGE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,kBAAD;AACE,QAAA,MAAM,EAAEC,OAAO,CAAC,kCAAD,CADjB;AAEE,QAAA,KAAK,EAAEF,MAAM,CAACG,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,6BAAC,sBAAD;AACE,QAAA,KAAK,EAAEH,MAAM,CAACI,SADhB;AAEE,QAAA,WAAW,EAAElB,OAAO,CAACmB,QAFvB;AAGE,QAAA,oBAAoB,EAAEP,WAHxB;AAIE,QAAA,YAAY,EAAE,sBAACQ,IAAD;AAAA,iBAAU,MAAI,CAAC1C,QAAL,CAAc;AAACP,YAAAA,KAAK,EAAEiD;AAAR,WAAd,CAAV;AAAA,SAJhB;AAKE,QAAA,YAAY,EAAE,KAAKnD,KAAL,CAAWE,KAL3B;AAME,QAAA,aAAa,EAAC,MANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAcE,6BAAC,sBAAD;AACE,QAAA,KAAK,EAAE2C,MAAM,CAACI,SADhB;AAEE,QAAA,oBAAoB,EAAEN,WAFxB;AAGE,QAAA,WAAW,EAAEZ,OAAO,CAACqB,QAHvB;AAIE,QAAA,YAAY,EAAE,sBAACD,IAAD;AAAA,iBAAU,MAAI,CAAC1C,QAAL,CAAc;AAACN,YAAAA,QAAQ,EAAEgD;AAAX,WAAd,CAAV;AAAA,SAJhB;AAKE,QAAA,YAAY,EAAE,KAAKnD,KAAL,CAAWG,QAL3B;AAME,QAAA,aAAa,EAAC,IANhB;AAOE,QAAA,eAAe,EAAE,IAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,EAwBE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAE0C,MAAM,CAACQ,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,2CAAD;AAAkB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,KAAL,EAAN;AAAA,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAET,MAAM,CAACU,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEV,MAAM,CAACW,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0BzB,OAAO,CAAC0B,KAAlC,CADF,CADF,CADF,EAOE,6BAAC,2CAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC1D,KAAL,CAAW8B,UAAX,CAAsBC,QAAtB,CAA+B,UAA/B,CAAN;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEe,MAAM,CAACU,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEV,MAAM,CAACW,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0BzB,OAAO,CAAC2B,MAAlC,CADF,CAFF,CAPF,CAxBF,CAHF,CADF;AA6CD;;;EAtGsCC,gB","sourcesContent":["import React, {Component} from 'react';\nimport {\n  View,\n  Image,\n  StatusBar,\n  Text,\n  TextInput,\n  ToastAndroid,\n  Platform,\n  AlertIOS,\n} from 'react-native';\nimport {white, gray} from '../../../assets/colors/index';\nimport config from '../../../assets/Config';\nimport {ScrollView, TouchableOpacity} from 'react-native-gesture-handler';\nimport LoaderBox from '../../components/LoaderBox';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default class LoginScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showProgress: false,\n      email: '',\n      password: '',\n    };\n  }\n  renderLoading() {\n    if (this.state.showProgress) {\n      return <LoaderBox />;\n    }\n  }\n  async Login() {\n    let fcmToken = await AsyncStorage.getItem('fcmToken');\n    console.log(fcmToken);\n    if (this.state.password != '' && this.state.email != '') {\n      this.setState({showProgress: true});\n      try {\n        let response = await fetch(config.DOMAIN + 'login', {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: this.state.email,\n            password: this.state.password,\n            fcm_token: fcmToken,\n          }),\n        });\n        let res = await response.json();\n        console.log('res', res);\n        if (res.status == 400) {\n          this.error(res.messg);\n        } else {\n          await AsyncStorage.setItem('@Trend:token', res.user[0].api_token);\n          this.props.navigation.navigate('TrendsScreen');\n        }\n        this.setState({showProgress: false});\n      } catch (error) {\n        console.log(error);\n        this.setState({showProgress: false});\n      }\n    } else {\n      this.error(strings.errorTxt);\n    }\n  }\n  error(msg) {\n    if (Platform.OS === 'android') {\n      ToastAndroid.show(msg, ToastAndroid.LONG);\n    } else {\n      AlertIOS.alert(msg);\n    }\n  }\n  render() {\n    return (\n      <ScrollView style={{backgroundColor: white}}>\n        <StatusBar barStyle=\"light-content\" backgroundColor={gray} />\n        {this.renderLoading()}\n        <View style={styles.loginView}>\n          <Image\n            source={require('../../../assets/images/login.png')}\n            style={styles.loginImg}\n          />\n\n          <TextInput\n            style={styles.textInput}\n            placeholder={strings.userName}\n            placeholderTextColor={gray}\n            onChangeText={(text) => this.setState({email: text})}\n            defaultValue={this.state.email}\n            returnKeyType=\"next\"\n          />\n          <TextInput\n            style={styles.textInput}\n            placeholderTextColor={gray}\n            placeholder={strings.Password}\n            onChangeText={(text) => this.setState({password: text})}\n            defaultValue={this.state.password}\n            returnKeyType=\"go\"\n            secureTextEntry={true}\n          />\n\n          <View style={styles.buttonsView}>\n            <TouchableOpacity onPress={() => this.Login()}>\n              <View style={styles.btnView}>\n                <Text style={styles.txt}>{strings.login}</Text>\n              </View>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              onPress={() => this.props.navigation.navigate('Register')}>\n              <View style={styles.btnView}>\n                <Text style={styles.txt}>{strings.create}</Text>\n              </View>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}