{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reference = _interopRequireDefault(require(\"./reference\"));\n\nvar _events = require(\"../../utils/events\");\n\nvar _log = require(\"../../utils/log\");\n\nvar _utils = require(\"../../utils\");\n\nvar _ModuleBase2 = _interopRequireDefault(require(\"../../utils/ModuleBase\"));\n\nvar _native = require(\"../../utils/native\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar FirebaseStorage = _reactNative.NativeModules.RNFirebaseStorage;\nvar NATIVE_EVENTS = ['storage_event', 'storage_error'];\nvar MODULE_NAME = 'RNFirebaseStorage';\nexports.MODULE_NAME = MODULE_NAME;\nvar NAMESPACE = 'storage';\nexports.NAMESPACE = NAMESPACE;\n\nvar Storage = function (_ModuleBase) {\n  (0, _inherits2.default)(Storage, _ModuleBase);\n\n  var _super = _createSuper(Storage);\n\n  function Storage(app) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Storage);\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n\n    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'storage_event'), _this._handleStorageEvent.bind((0, _assertThisInitialized2.default)(_this)));\n\n    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'storage_error'), _this._handleStorageEvent.bind((0, _assertThisInitialized2.default)(_this)));\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Storage, [{\n    key: \"ref\",\n    value: function ref(path) {\n      return new _reference.default(this, path);\n    }\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      return new _reference.default(this, \"url::\" + url);\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      (0, _native.getNativeModule)(this).setMaxOperationRetryTime(time);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      (0, _native.getNativeModule)(this).setMaxUploadRetryTime(time);\n    }\n  }, {\n    key: \"setMaxDownloadRetryTime\",\n    value: function setMaxDownloadRetryTime(time) {\n      (0, _native.getNativeModule)(this).setMaxDownloadRetryTime(time);\n    }\n  }, {\n    key: \"_getSubEventName\",\n    value: function _getSubEventName(path, eventName) {\n      return (0, _events.getAppEventName)(this, path + \"-\" + eventName);\n    }\n  }, {\n    key: \"_handleStorageEvent\",\n    value: function _handleStorageEvent(event) {\n      var path = event.path,\n          eventName = event.eventName;\n      var body = event.body || {};\n      (0, _log.getLogger)(this).debug('_handleStorageEvent: ', path, eventName, body);\n\n      _events.SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n    }\n  }, {\n    key: \"_handleStorageError\",\n    value: function _handleStorageError(err) {\n      var path = err.path,\n          eventName = err.eventName;\n      var body = err.body || {};\n      (0, _log.getLogger)(this).debug('_handleStorageError ->', err);\n\n      _events.SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n    }\n  }, {\n    key: \"_addListener\",\n    value: function _addListener(path, eventName, cb) {\n      _events.SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);\n    }\n  }, {\n    key: \"_removeListener\",\n    value: function _removeListener(path, eventName, origCB) {\n      _events.SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);\n    }\n  }]);\n  return Storage;\n}(_ModuleBase2.default);\n\nexports.default = Storage;\nvar statics = {\n  TaskEvent: {\n    STATE_CHANGED: 'state_changed'\n  },\n  TaskState: {\n    RUNNING: 'running',\n    PAUSED: 'paused',\n    SUCCESS: 'success',\n    CANCELLED: 'cancelled',\n    ERROR: 'error'\n  },\n  Native: FirebaseStorage ? {\n    MAIN_BUNDLE_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.MAIN_BUNDLE_PATH),\n    CACHES_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.CACHES_DIRECTORY_PATH),\n    DOCUMENT_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.DOCUMENT_DIRECTORY_PATH),\n    EXTERNAL_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.EXTERNAL_DIRECTORY_PATH),\n    EXTERNAL_STORAGE_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH),\n    TEMP_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.TEMP_DIRECTORY_PATH),\n    LIBRARY_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.LIBRARY_DIRECTORY_PATH),\n    FILETYPE_REGULAR: (0, _utils.stripTrailingSlash)(FirebaseStorage.FILETYPE_REGULAR),\n    FILETYPE_DIRECTORY: (0, _utils.stripTrailingSlash)(FirebaseStorage.FILETYPE_DIRECTORY)\n  } : {}\n};\nexports.statics = statics;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/storage/index.js"],"names":["FirebaseStorage","NativeModules","RNFirebaseStorage","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Storage","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","SharedEventEmitter","addListener","_handleStorageEvent","bind","path","StorageRef","url","time","setMaxOperationRetryTime","setMaxUploadRetryTime","setMaxDownloadRetryTime","eventName","event","body","debug","emit","_getSubEventName","err","cb","origCB","removeListener","ModuleBase","statics","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELLED","ERROR","Native","MAIN_BUNDLE_PATH","CACHES_DIRECTORY_PATH","DOCUMENT_DIRECTORY_PATH","EXTERNAL_DIRECTORY_PATH","EXTERNAL_STORAGE_DIRECTORY_PATH","TEMP_DIRECTORY_PATH","LIBRARY_DIRECTORY_PATH","FILETYPE_REGULAR","FILETYPE_DIRECTORY"],"mappings":"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","sourcesContent":["/**\n * \n * Storage representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport StorageRef from './reference';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { stripTrailingSlash } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nconst FirebaseStorage = NativeModules.RNFirebaseStorage;\nconst NATIVE_EVENTS = ['storage_event', 'storage_error'];\nexport const MODULE_NAME = 'RNFirebaseStorage';\nexport const NAMESPACE = 'storage';\nexport default class Storage extends ModuleBase {\n  /**\n   *\n   * @param app\n   * @param options\n   */\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_event'), this._handleStorageEvent.bind(this));\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_error'), this._handleStorageEvent.bind(this));\n  }\n  /**\n   * Returns a reference for the given path in the default bucket.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   * @param path\n   * @returns {StorageReference}\n   */\n\n\n  ref(path) {\n    return new StorageRef(this, path);\n  }\n  /**\n   * Returns a reference for the given absolute URL.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   * @param url\n   * @returns {StorageReference}\n   */\n\n\n  refFromURL(url) {\n    // TODO don't think this is correct?\n    return new StorageRef(this, `url::${url}`);\n  }\n  /**\n   * setMaxOperationRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   * @param time The new maximum operation retry time in milliseconds.\n   */\n\n\n  setMaxOperationRetryTime(time) {\n    getNativeModule(this).setMaxOperationRetryTime(time);\n  }\n  /**\n   * setMaxUploadRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   * @param time The new maximum upload retry time in milliseconds.\n   */\n\n\n  setMaxUploadRetryTime(time) {\n    getNativeModule(this).setMaxUploadRetryTime(time);\n  }\n  /**\n   * setMaxDownloadRetryTime\n   * @url N/A\n   * @param time The new maximum download retry time in milliseconds.\n   */\n\n\n  setMaxDownloadRetryTime(time) {\n    getNativeModule(this).setMaxDownloadRetryTime(time);\n  }\n  /**\n   * INTERNALS\n   */\n\n\n  _getSubEventName(path, eventName) {\n    return getAppEventName(this, `${path}-${eventName}`);\n  }\n\n  _handleStorageEvent(event) {\n    const {\n      path,\n      eventName\n    } = event;\n    const body = event.body || {};\n    getLogger(this).debug('_handleStorageEvent: ', path, eventName, body);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n\n  _handleStorageError(err) {\n    const {\n      path,\n      eventName\n    } = err;\n    const body = err.body || {};\n    getLogger(this).debug('_handleStorageError ->', err);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n\n  _addListener(path, eventName, cb) {\n    SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);\n  }\n\n  _removeListener(path, eventName, origCB) {\n    SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);\n  }\n\n}\nexport const statics = {\n  TaskEvent: {\n    STATE_CHANGED: 'state_changed'\n  },\n  TaskState: {\n    RUNNING: 'running',\n    PAUSED: 'paused',\n    SUCCESS: 'success',\n    CANCELLED: 'cancelled',\n    ERROR: 'error'\n  },\n  Native: FirebaseStorage ? {\n    MAIN_BUNDLE_PATH: stripTrailingSlash(FirebaseStorage.MAIN_BUNDLE_PATH),\n    CACHES_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.CACHES_DIRECTORY_PATH),\n    DOCUMENT_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.DOCUMENT_DIRECTORY_PATH),\n    EXTERNAL_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_DIRECTORY_PATH),\n    EXTERNAL_STORAGE_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH),\n    TEMP_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.TEMP_DIRECTORY_PATH),\n    LIBRARY_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.LIBRARY_DIRECTORY_PATH),\n    FILETYPE_REGULAR: stripTrailingSlash(FirebaseStorage.FILETYPE_REGULAR),\n    FILETYPE_DIRECTORY: stripTrailingSlash(FirebaseStorage.FILETYPE_DIRECTORY)\n  } : {}\n};"]},"metadata":{},"sourceType":"script"}