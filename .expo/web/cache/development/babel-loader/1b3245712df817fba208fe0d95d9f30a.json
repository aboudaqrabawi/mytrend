{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ = require(\"./\");\n\nvar _AdRequest = _interopRequireDefault(require(\"./AdRequest\"));\n\nvar _events = require(\"../../utils/events\");\n\nvar _native = require(\"../../utils/native\");\n\nvar _utils = require(\"../../utils\");\n\nvar subscriptions = [];\n\nvar Interstitial = function () {\n  function Interstitial(admob, adUnit) {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, Interstitial);\n\n    this._onInterstitialEvent = function (event) {\n      var eventType = \"interstitial:\" + _this.adUnit + \":\" + event.type;\n      var emitData = (0, _extends2.default)({}, event);\n\n      switch (event.type) {\n        case 'onAdLoaded':\n          _this.loaded = true;\n          break;\n\n        case 'onAdFailedToLoad':\n          emitData = (0, _utils.nativeToJSError)(event.payload.code, event.payload.message);\n          emitData.type = event.type;\n          break;\n\n        default:\n      }\n\n      _events.SharedEventEmitter.emit(eventType, emitData);\n\n      _events.SharedEventEmitter.emit(\"interstitial:\" + _this.adUnit + \":*\", emitData);\n    };\n\n    if (_reactNative.Platform.OS === 'ios') {\n      (0, _native.getNativeModule)(admob).clearInterstitial(adUnit);\n    }\n\n    for (var i = 0, len = subscriptions.length; i < len; i++) {\n      subscriptions[i].remove();\n    }\n\n    subscriptions = [];\n    this._admob = admob;\n    this.adUnit = adUnit;\n    this.loaded = false;\n\n    _events.SharedEventEmitter.removeAllListeners(\"interstitial_\" + adUnit);\n\n    _events.SharedEventEmitter.addListener(\"interstitial_\" + adUnit, this._onInterstitialEvent);\n  }\n\n  (0, _createClass2.default)(Interstitial, [{\n    key: \"loadAd\",\n    value: function loadAd(request) {\n      var adRequest = request;\n\n      if (!adRequest || !Object.keys(adRequest)) {\n        adRequest = new _AdRequest.default().addTestDevice().build();\n      }\n\n      return (0, _native.getNativeModule)(this._admob).interstitialLoadAd(this.adUnit, adRequest);\n    }\n  }, {\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this.loaded;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (this.loaded) {\n        (0, _native.getNativeModule)(this._admob).interstitialShowAd(this.adUnit);\n      }\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventType, listenerCb) {\n      if (!_.statics.EventTypes[eventType]) {\n        console.warn(\"Invalid event type provided, must be one of: \" + Object.keys(_.statics.EventTypes).join(', '));\n        return null;\n      }\n\n      var sub = _events.SharedEventEmitter.addListener(\"interstitial:\" + this.adUnit + \":\" + eventType, listenerCb);\n\n      subscriptions.push(sub);\n      return sub;\n    }\n  }]);\n  return Interstitial;\n}();\n\nexports.default = Interstitial;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/admob/Interstitial.js"],"names":["subscriptions","Interstitial","admob","adUnit","_onInterstitialEvent","event","eventType","type","emitData","loaded","payload","code","message","SharedEventEmitter","emit","Platform","OS","clearInterstitial","i","len","length","remove","_admob","removeAllListeners","addListener","request","adRequest","Object","keys","AdRequest","addTestDevice","build","interstitialLoadAd","interstitialShowAd","listenerCb","statics","EventTypes","console","warn","join","sub","push"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,IAAIA,aAAa,GAAG,EAApB;;IACqBC,Y;AACnB,wBAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAAA;;AAAA;;AAAA,SAwB3BC,oBAxB2B,GAwBJ,UAAAC,KAAK,EAAI;AAC9B,UAAMC,SAAS,qBAAmB,KAAI,CAACH,MAAxB,SAAkCE,KAAK,CAACE,IAAvD;AACA,UAAIC,QAAQ,GAAG,uBAAc,EAAd,EAAkBH,KAAlB,CAAf;;AAEA,cAAQA,KAAK,CAACE,IAAd;AACE,aAAK,YAAL;AACE,UAAA,KAAI,CAACE,MAAL,GAAc,IAAd;AACA;;AAEF,aAAK,kBAAL;AACED,UAAAA,QAAQ,GAAG,4BAAgBH,KAAK,CAACK,OAAN,CAAcC,IAA9B,EAAoCN,KAAK,CAACK,OAAN,CAAcE,OAAlD,CAAX;AACAJ,UAAAA,QAAQ,CAACD,IAAT,GAAgBF,KAAK,CAACE,IAAtB;AACA;;AAEF;AAVF;;AAaAM,iCAAmBC,IAAnB,CAAwBR,SAAxB,EAAmCE,QAAnC;;AACAK,iCAAmBC,IAAnB,mBAAwC,KAAI,CAACX,MAA7C,SAAyDK,QAAzD;AACD,KA3C0B;;AAEzB,QAAIO,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,mCAAgBd,KAAhB,EAAuBe,iBAAvB,CAAyCd,MAAzC;AACD;;AAED,SAAK,IAAIe,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGnB,aAAa,CAACoB,MAApC,EAA4CF,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,EAAtD,EAA0D;AACxDlB,MAAAA,aAAa,CAACkB,CAAD,CAAb,CAAiBG,MAAjB;AACD;;AAEDrB,IAAAA,aAAa,GAAG,EAAhB;AACA,SAAKsB,MAAL,GAAcpB,KAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKM,MAAL,GAAc,KAAd;;AACAI,+BAAmBU,kBAAnB,mBAAsDpB,MAAtD;;AACAU,+BAAmBW,WAAnB,mBAA+CrB,MAA/C,EAAyD,KAAKC,oBAA9D;AACD;;;;WAkCD,gBAAOqB,OAAP,EAAgB;AACd,UAAIC,SAAS,GAAGD,OAAhB;;AAEA,UAAI,CAACC,SAAD,IAAc,CAACC,MAAM,CAACC,IAAP,CAAYF,SAAZ,CAAnB,EAA2C;AACzCA,QAAAA,SAAS,GAAG,IAAIG,kBAAJ,GAAgBC,aAAhB,GAAgCC,KAAhC,EAAZ;AACD;;AAED,aAAO,6BAAgB,KAAKT,MAArB,EAA6BU,kBAA7B,CAAgD,KAAK7B,MAArD,EAA6DuB,SAA7D,CAAP;AACD;;;WAOD,oBAAW;AACT,aAAO,KAAKjB,MAAZ;AACD;;;WAOD,gBAAO;AACL,UAAI,KAAKA,MAAT,EAAiB;AACf,qCAAgB,KAAKa,MAArB,EAA6BW,kBAA7B,CAAgD,KAAK9B,MAArD;AACD;AACF;;;WASD,YAAGG,SAAH,EAAc4B,UAAd,EAA0B;AACxB,UAAI,CAACC,UAAQC,UAAR,CAAmB9B,SAAnB,CAAL,EAAoC;AAClC+B,QAAAA,OAAO,CAACC,IAAR,mDAA6DX,MAAM,CAACC,IAAP,CAAYO,UAAQC,UAApB,EAAgCG,IAAhC,CAAqC,IAArC,CAA7D;AACA,eAAO,IAAP;AACD;;AAED,UAAMC,GAAG,GAAG3B,2BAAmBW,WAAnB,mBAA+C,KAAKrB,MAApD,SAA8DG,SAA9D,EAA2E4B,UAA3E,CAAZ;;AACAlC,MAAAA,aAAa,CAACyC,IAAd,CAAmBD,GAAnB;AACA,aAAOA,GAAP;AACD","sourcesContent":["import { Platform } from 'react-native';\nimport { statics } from './';\nimport AdRequest from './AdRequest';\nimport { SharedEventEmitter } from '../../utils/events';\nimport { getNativeModule } from '../../utils/native';\nimport { nativeToJSError } from '../../utils';\nlet subscriptions = [];\nexport default class Interstitial {\n  constructor(admob, adUnit) {\n    // Interstitials on iOS require a new instance each time\n    if (Platform.OS === 'ios') {\n      getNativeModule(admob).clearInterstitial(adUnit);\n    }\n\n    for (let i = 0, len = subscriptions.length; i < len; i++) {\n      subscriptions[i].remove();\n    }\n\n    subscriptions = [];\n    this._admob = admob;\n    this.adUnit = adUnit;\n    this.loaded = false;\n    SharedEventEmitter.removeAllListeners(`interstitial_${adUnit}`);\n    SharedEventEmitter.addListener(`interstitial_${adUnit}`, this._onInterstitialEvent);\n  }\n  /**\n   * Handle a JS emit event\n   * @param event\n   * @private\n   */\n\n\n  _onInterstitialEvent = event => {\n    const eventType = `interstitial:${this.adUnit}:${event.type}`;\n    let emitData = Object.assign({}, event);\n\n    switch (event.type) {\n      case 'onAdLoaded':\n        this.loaded = true;\n        break;\n\n      case 'onAdFailedToLoad':\n        emitData = nativeToJSError(event.payload.code, event.payload.message);\n        emitData.type = event.type;\n        break;\n\n      default:\n    }\n\n    SharedEventEmitter.emit(eventType, emitData);\n    SharedEventEmitter.emit(`interstitial:${this.adUnit}:*`, emitData);\n  };\n  /**\n   * Load an ad with an instance of AdRequest\n   * @param request\n   * @returns {*}\n   */\n\n  loadAd(request) {\n    let adRequest = request;\n\n    if (!adRequest || !Object.keys(adRequest)) {\n      adRequest = new AdRequest().addTestDevice().build();\n    }\n\n    return getNativeModule(this._admob).interstitialLoadAd(this.adUnit, adRequest);\n  }\n  /**\n   * Return a local instance of isLoaded\n   * @returns {boolean}\n   */\n\n\n  isLoaded() {\n    return this.loaded;\n  }\n  /**\n   * Show the advert - will only show if loaded\n   * @returns {*}\n   */\n\n\n  show() {\n    if (this.loaded) {\n      getNativeModule(this._admob).interstitialShowAd(this.adUnit);\n    }\n  }\n  /**\n   * Listen to an Ad event\n   * @param eventType\n   * @param listenerCb\n   * @returns {null}\n   */\n\n\n  on(eventType, listenerCb) {\n    if (!statics.EventTypes[eventType]) {\n      console.warn(`Invalid event type provided, must be one of: ${Object.keys(statics.EventTypes).join(', ')}`);\n      return null;\n    }\n\n    const sub = SharedEventEmitter.addListener(`interstitial:${this.adUnit}:${eventType}`, listenerCb);\n    subscriptions.push(sub);\n    return sub;\n  }\n\n}"]},"metadata":{},"sourceType":"script"}