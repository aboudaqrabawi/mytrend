{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _events = require(\"./events\");\n\nvar _DataSnapshot = _interopRequireDefault(require(\"../modules/database/DataSnapshot\"));\n\nvar _Reference = _interopRequireDefault(require(\"../modules/database/Reference\"));\n\nvar _ = require(\"./\");\n\nvar SyncTree = function () {\n  function SyncTree() {\n    (0, _classCallCheck2.default)(this, SyncTree);\n    this._tree = {};\n    this._reverseLookup = {};\n\n    if (_reactNative.NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.RNFirebaseDatabase);\n\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n\n  (0, _createClass2.default)(SyncTree, [{\n    key: \"_handleSyncEvent\",\n    value: function _handleSyncEvent(event) {\n      if (event.error) {\n        this._handleErrorEvent(event);\n      } else {\n        this._handleValueEvent(event);\n      }\n    }\n  }, {\n    key: \"_handleValueEvent\",\n    value: function _handleValueEvent(event) {\n      var _event$registration = event.registration,\n          key = _event$registration.key,\n          eventRegistrationKey = _event$registration.eventRegistrationKey;\n      var registration = this.getRegistration(eventRegistrationKey);\n\n      if (!registration) {\n        return _reactNative.NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n      }\n\n      var _event$data = event.data,\n          snapshot = _event$data.snapshot,\n          previousChildName = _event$data.previousChildName;\n      return _events.SharedEventEmitter.emit(eventRegistrationKey, new _DataSnapshot.default(registration.ref, snapshot), previousChildName);\n    }\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(event) {\n      var _event$error = event.error,\n          code = _event$error.code,\n          message = _event$error.message;\n      var _event$registration2 = event.registration,\n          eventRegistrationKey = _event$registration2.eventRegistrationKey,\n          registrationCancellationKey = _event$registration2.registrationCancellationKey;\n      var registration = this.getRegistration(registrationCancellationKey);\n\n      if (registration) {\n        var error = (0, _.nativeToJSError)(code, message, {\n          ref: registration.ref\n        });\n\n        _events.SharedEventEmitter.emit(registrationCancellationKey, error);\n\n        this.removeRegistration(eventRegistrationKey);\n      }\n    }\n  }, {\n    key: \"getRegistration\",\n    value: function getRegistration(registration) {\n      return this._reverseLookup[registration] ? (0, _extends2.default)({}, this._reverseLookup[registration]) : null;\n    }\n  }, {\n    key: \"removeListenersForRegistrations\",\n    value: function removeListenersForRegistrations(registrations) {\n      if ((0, _.isString)(registrations)) {\n        this.removeRegistration(registrations);\n\n        _events.SharedEventEmitter.removeAllListeners(registrations);\n\n        return 1;\n      }\n\n      if (!Array.isArray(registrations)) return 0;\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        this.removeRegistration(registrations[i]);\n\n        _events.SharedEventEmitter.removeAllListeners(registrations[i]);\n      }\n\n      return registrations.length;\n    }\n  }, {\n    key: \"removeListenerRegistrations\",\n    value: function removeListenerRegistrations(listener, registrations) {\n      if (!Array.isArray(registrations)) return [];\n      var removed = [];\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        var registration = registrations[i];\n\n        var subscriptions = _events.SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n        if (subscriptions) {\n          for (var j = 0, l = subscriptions.length; j < l; j++) {\n            var subscription = subscriptions[j];\n\n            if (subscription && subscription.listener === listener) {\n              subscription.remove();\n              removed.push(registration);\n              this.removeRegistration(registration);\n            }\n          }\n        }\n      }\n\n      return removed;\n    }\n  }, {\n    key: \"getRegistrationsByPath\",\n    value: function getRegistrationsByPath(path) {\n      var out = [];\n      var eventKeys = Object.keys(this._tree[path] || {});\n\n      for (var i = 0, len = eventKeys.length; i < len; i++) {\n        Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n      }\n\n      return out;\n    }\n  }, {\n    key: \"getRegistrationsByPathEvent\",\n    value: function getRegistrationsByPathEvent(path, eventType) {\n      if (!this._tree[path]) return [];\n      if (!this._tree[path][eventType]) return [];\n      return Object.keys(this._tree[path][eventType]);\n    }\n  }, {\n    key: \"getOneByPathEventListener\",\n    value: function getOneByPathEventListener(path, eventType, listener) {\n      if (!this._tree[path]) return null;\n      if (!this._tree[path][eventType]) return null;\n      var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n      for (var i = 0; i < registrationsForPathEvent.length; i++) {\n        var registration = registrationsForPathEvent[i];\n        if (registration[1] === listener) return registration[0];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRegistration\",\n    value: function addRegistration(registration) {\n      var eventRegistrationKey = registration.eventRegistrationKey,\n          eventType = registration.eventType,\n          listener = registration.listener,\n          once = registration.once,\n          path = registration.path;\n      if (!this._tree[path]) this._tree[path] = {};\n      if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n      this._tree[path][eventType][eventRegistrationKey] = listener;\n      this._reverseLookup[eventRegistrationKey] = registration;\n\n      if (once) {\n        _events.SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n      } else {\n        _events.SharedEventEmitter.addListener(eventRegistrationKey, listener);\n      }\n\n      return eventRegistrationKey;\n    }\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration(registration) {\n      if (!this._reverseLookup[registration]) return false;\n      var _this$_reverseLookup$ = this._reverseLookup[registration],\n          path = _this$_reverseLookup$.path,\n          eventType = _this$_reverseLookup$.eventType,\n          once = _this$_reverseLookup$.once;\n\n      if (!this._tree[path]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      if (!this._tree[path][eventType]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      var registrationObj = this._reverseLookup[registration];\n\n      if (registrationObj && !once) {\n        _reactNative.NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n      }\n\n      delete this._tree[path][eventType][registration];\n      delete this._reverseLookup[registration];\n      return !!registrationObj;\n    }\n  }, {\n    key: \"_onOnceRemoveRegistration\",\n    value: function _onOnceRemoveRegistration(registration, listener) {\n      var _this = this;\n\n      return function () {\n        _this.removeRegistration(registration);\n\n        listener.apply(void 0, arguments);\n      };\n    }\n  }]);\n  return SyncTree;\n}();\n\nvar _default = new SyncTree();\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/utils/SyncTree.js"],"names":["SyncTree","_tree","_reverseLookup","NativeModules","RNFirebaseDatabase","_nativeEmitter","NativeEventEmitter","addListener","_handleSyncEvent","bind","event","error","_handleErrorEvent","_handleValueEvent","registration","key","eventRegistrationKey","getRegistration","off","data","snapshot","previousChildName","SharedEventEmitter","emit","DataSnapshot","ref","code","message","registrationCancellationKey","removeRegistration","registrations","removeAllListeners","Array","isArray","i","len","length","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","j","l","subscription","remove","push","path","out","eventKeys","Object","keys","prototype","apply","eventType","registrationsForPathEvent","entries","once","_onOnceRemoveRegistration","registrationObj"],"mappings":"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","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { SharedEventEmitter } from './events';\nimport DataSnapshot from '../modules/database/DataSnapshot';\nimport DatabaseReference from '../modules/database/Reference';\nimport { isString, nativeToJSError } from './';\n\n/**\n * Internally used to manage firebase database realtime event\n * subscriptions and keep the listeners in sync in js vs native.\n */\nclass SyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    if (NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new NativeEventEmitter(NativeModules.RNFirebaseDatabase);\n\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleSyncEvent(event) {\n    if (event.error) {\n      this._handleErrorEvent(event);\n    } else {\n      this._handleValueEvent(event);\n    }\n  }\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If there is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const {\n      key,\n      eventRegistrationKey\n    } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n    }\n\n    const {\n      snapshot,\n      previousChildName\n    } = event.data; // forward on to users .on(successCallback <-- listener\n\n    return SharedEventEmitter.emit(eventRegistrationKey, new DataSnapshot(registration.ref, snapshot), previousChildName);\n  }\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const {\n      code,\n      message\n    } = event.error;\n    const {\n      eventRegistrationKey,\n      registrationCancellationKey\n    } = event.registration;\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = nativeToJSError(code, message, {\n        ref: registration.ref\n      }); // forward on to users .on(successCallback, cancellationCallback <-- listener\n\n      SharedEventEmitter.emit(registrationCancellationKey, error); // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n\n\n  getRegistration(registration) {\n    return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n  }\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n\n\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) return 0;\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n\n\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) return [];\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n\n      const subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j]; // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) return [];\n    if (!this._tree[path][eventType]) return [];\n    return Object.keys(this._tree[path][eventType]);\n  }\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n\n\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) return null;\n    if (!this._tree[path][eventType]) return null;\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) return registration[0];\n    }\n\n    return null;\n  }\n  /**\n   * Register a new listener.\n   *\n   * @param parameters\n   * @param listener\n   * @return {String}\n   */\n\n\n  addRegistration(registration) {\n    const {\n      eventRegistrationKey,\n      eventType,\n      listener,\n      once,\n      path\n    } = registration;\n    if (!this._tree[path]) this._tree[path] = {};\n    if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n\n\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) return false;\n    const {\n      path,\n      eventType,\n      once\n    } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    } // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n\n\n    const registrationObj = this._reverseLookup[registration];\n\n    if (registrationObj && !once) {\n      NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n    return !!registrationObj;\n  }\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n\n\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n\n}\n\nexport default new SyncTree();"]},"metadata":{},"sourceType":"script"}