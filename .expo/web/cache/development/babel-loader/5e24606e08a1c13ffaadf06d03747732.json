{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _events = require(\"../../utils/events\");\n\nvar _ModuleBase2 = _interopRequireDefault(require(\"../../utils/ModuleBase\"));\n\nvar _CollectionReference = _interopRequireDefault(require(\"./CollectionReference\"));\n\nvar _DocumentReference = _interopRequireDefault(require(\"./DocumentReference\"));\n\nvar _FieldPath = _interopRequireDefault(require(\"./FieldPath\"));\n\nvar _FieldValue = _interopRequireDefault(require(\"./FieldValue\"));\n\nvar _GeoPoint = _interopRequireDefault(require(\"./GeoPoint\"));\n\nvar _Blob = _interopRequireDefault(require(\"./Blob\"));\n\nvar _Path = _interopRequireDefault(require(\"./Path\"));\n\nvar _WriteBatch = _interopRequireDefault(require(\"./WriteBatch\"));\n\nvar _TransactionHandler = _interopRequireDefault(require(\"./TransactionHandler\"));\n\nvar _Timestamp = _interopRequireDefault(require(\"./Timestamp\"));\n\nvar _Transaction = _interopRequireDefault(require(\"./Transaction\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _native = require(\"../../utils/native\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar CACHE_SIZE_UNLIMITED = -1;\nvar MIN_CACHE_SIZE = 1048576;\nvar NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];\nvar LogLevels = ['debug', 'error', 'silent'];\nvar MODULE_NAME = 'RNFirebaseFirestore';\nexports.MODULE_NAME = MODULE_NAME;\nvar NAMESPACE = 'firestore';\nexports.NAMESPACE = NAMESPACE;\n\nvar Firestore = function (_ModuleBase) {\n  (0, _inherits2.default)(Firestore, _ModuleBase);\n\n  var _super = _createSuper(Firestore);\n\n  function Firestore(app) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Firestore);\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    _this._referencePath = new _Path.default([]);\n    _this._transactionHandler = new _TransactionHandler.default((0, _assertThisInitialized2.default)(_this));\n\n    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'firestore_collection_sync_event'), _this._onCollectionSyncEvent.bind((0, _assertThisInitialized2.default)(_this)));\n\n    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'firestore_document_sync_event'), _this._onDocumentSyncEvent.bind((0, _assertThisInitialized2.default)(_this)));\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Firestore, [{\n    key: \"batch\",\n    value: function batch() {\n      return new _WriteBatch.default(this);\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      var path = this._referencePath.child(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error('Argument \"collectionPath\" must point to a collection.');\n      }\n\n      return new _CollectionReference.default(this, path);\n    }\n  }, {\n    key: \"disableNetwork\",\n    value: function disableNetwork() {\n      return (0, _native.getNativeModule)(this).disableNetwork();\n    }\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      var path = this._referencePath.child(documentPath);\n\n      if (!path.isDocument) {\n        throw new Error('Argument \"documentPath\" must point to a document.');\n      }\n\n      return new _DocumentReference.default(this, path);\n    }\n  }, {\n    key: \"enableNetwork\",\n    value: function enableNetwork() {\n      return (0, _native.getNativeModule)(this).enableNetwork();\n    }\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction) {\n      return this._transactionHandler._add(updateFunction);\n    }\n  }, {\n    key: \"settings\",\n    value: function settings(_settings) {\n      if (!(0, _utils.isObject)(_settings)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings must be an object.'));\n      }\n\n      if ((0, _utils.hop)(_settings, 'host') && !(0, _utils.isString)(_settings.host)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.host must be a string.'));\n      }\n\n      if ((0, _utils.hop)(_settings, 'persistence') && !(0, _utils.isBoolean)(_settings.persistence)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.persistence must be boolean.'));\n      }\n\n      if ((0, _utils.hop)(_settings, 'cacheSizeBytes')) {\n        if (!(0, _utils.isNumber)(_settings.cacheSizeBytes)) {\n          return Promise.reject(new Error('Firestore.settings failed: settings.cacheSizeBytes must be number.'));\n        }\n\n        if (_settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && _settings.cacheSizeBytes < MIN_CACHE_SIZE) {\n          return Promise.reject(new Error(\"Firestore.settings failed: settings.cacheSizeBytes must be set to \" + MIN_CACHE_SIZE + \" at least bytes.\"));\n        }\n      }\n\n      if ((0, _utils.hop)(_settings, 'ssl') && !(0, _utils.isBoolean)(_settings.ssl)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.ssl must be boolean.'));\n      }\n\n      if ((0, _utils.hop)(_settings, 'timestampsInSnapshots') && !(0, _utils.isBoolean)(_settings.timestampsInSnapshots)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.timestampsInSnapshots must be boolean.'));\n      }\n\n      return (0, _native.getNativeModule)(this).settings(_settings);\n    }\n  }, {\n    key: \"enablePersistence\",\n    value: function enablePersistence() {\n      console.warn('Due to restrictions in the native SDK, persistence must be configured in firebase.firestore().settings()');\n      return Promise.resolve();\n    }\n  }, {\n    key: \"_onCollectionSyncEvent\",\n    value: function _onCollectionSyncEvent(event) {\n      if (event.error) {\n        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, \"onQuerySnapshotError:\" + event.listenerId), event);\n      } else {\n        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, \"onQuerySnapshot:\" + event.listenerId), event.querySnapshot);\n      }\n    }\n  }, {\n    key: \"_onDocumentSyncEvent\",\n    value: function _onDocumentSyncEvent(event) {\n      if (event.error) {\n        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, \"onDocumentSnapshotError:\" + event.listenerId), event);\n      } else {\n        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, \"onDocumentSnapshot:\" + event.listenerId), event.documentSnapshot);\n      }\n    }\n  }]);\n  return Firestore;\n}(_ModuleBase2.default);\n\nexports.default = Firestore;\nvar statics = {\n  Blob: _Blob.default,\n  FieldPath: _FieldPath.default,\n  FieldValue: _FieldValue.default,\n  GeoPoint: _GeoPoint.default,\n  Timestamp: _Timestamp.default,\n  CACHE_SIZE_UNLIMITED: CACHE_SIZE_UNLIMITED,\n  enableLogging: function enableLogging(enabled) {\n    console.warn('firebase.firestore.enableLogging is deprecated, use firebase.firestore().setLogLevel instead.');\n    this.setLogLevel(enabled ? 'debug' : 'silent');\n  },\n  setLogLevel: function setLogLevel(logLevel) {\n    if (LogLevels.indexOf(logLevel) === -1) {\n      throw new Error('Argument `logLevel` must be one of: `debug`, `error`, `silent`');\n    }\n\n    if (_reactNative.NativeModules[MODULE_NAME]) {\n      _reactNative.NativeModules[MODULE_NAME].setLogLevel(logLevel);\n    }\n  }\n};\nexports.statics = statics;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/firestore/index.js"],"names":["CACHE_SIZE_UNLIMITED","MIN_CACHE_SIZE","NATIVE_EVENTS","LogLevels","MODULE_NAME","NAMESPACE","Firestore","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_referencePath","Path","_transactionHandler","TransactionHandler","SharedEventEmitter","addListener","_onCollectionSyncEvent","bind","_onDocumentSyncEvent","WriteBatch","collectionPath","path","child","isCollection","Error","CollectionReference","disableNetwork","documentPath","isDocument","DocumentReference","enableNetwork","updateFunction","_add","settings","Promise","reject","host","persistence","cacheSizeBytes","ssl","timestampsInSnapshots","console","warn","resolve","event","error","emit","listenerId","querySnapshot","documentSnapshot","ModuleBase","statics","Blob","FieldPath","FieldValue","GeoPoint","Timestamp","enableLogging","enabled","setLogLevel","logLevel","indexOf","NativeModules"],"mappings":"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","sourcesContent":["/**\n * \n * Firestore representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport ModuleBase from '../../utils/ModuleBase';\nimport CollectionReference from './CollectionReference';\nimport DocumentReference from './DocumentReference';\nimport FieldPath from './FieldPath';\nimport FieldValue from './FieldValue';\nimport GeoPoint from './GeoPoint';\nimport Blob from './Blob';\nimport Path from './Path';\nimport WriteBatch from './WriteBatch';\nimport TransactionHandler from './TransactionHandler';\nimport Timestamp from './Timestamp';\nimport Transaction from './Transaction';\nimport { isBoolean, isObject, isString, isNumber, hop } from '../../utils';\nimport { getNativeModule } from '../../utils/native';\n// A flag representing the unlimited cache size\nconst CACHE_SIZE_UNLIMITED = -1; // The minimum cache size in the firebase SDK (currently 1MB)\n\nconst MIN_CACHE_SIZE = 1048576;\nconst NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];\nconst LogLevels = ['debug', 'error', 'silent'];\nexport const MODULE_NAME = 'RNFirebaseFirestore';\nexport const NAMESPACE = 'firestore';\n/**\n * @class Firestore\n */\n\nexport default class Firestore extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._referencePath = new Path([]);\n    this._transactionHandler = new TransactionHandler(this);\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onCollectionSnapshot\n    getAppEventName(this, 'firestore_collection_sync_event'), this._onCollectionSyncEvent.bind(this));\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onDocumentSnapshot\n    getAppEventName(this, 'firestore_document_sync_event'), this._onDocumentSyncEvent.bind(this));\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Creates a write batch, used for performing multiple writes as a single atomic operation.\n   *\n   * @returns {WriteBatch}\n   */\n\n\n  batch() {\n    return new WriteBatch(this);\n  }\n  /**\n   * Gets a CollectionReference instance that refers to the collection at the specified path.\n   *\n   * @param collectionPath\n   * @returns {CollectionReference}\n   */\n\n\n  collection(collectionPath) {\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error('Argument \"collectionPath\" must point to a collection.');\n    }\n\n    return new CollectionReference(this, path);\n  }\n\n  disableNetwork() {\n    return getNativeModule(this).disableNetwork();\n  }\n  /**\n   * Gets a DocumentReference instance that refers to the document at the specified path.\n   *\n   * @param documentPath\n   * @returns {DocumentReference}\n   */\n\n\n  doc(documentPath) {\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error('Argument \"documentPath\" must point to a document.');\n    }\n\n    return new DocumentReference(this, path);\n  }\n\n  enableNetwork() {\n    return getNativeModule(this).enableNetwork();\n  }\n  /**\n   * Executes the given updateFunction and then attempts to commit the\n   * changes applied within the transaction. If any document read within\n   * the transaction has changed, Cloud Firestore retries the updateFunction.\n   *\n   * If it fails to commit after 5 attempts, the transaction fails.\n   *\n   * @param updateFunction\n   * @returns {void|Promise<any>}\n   */\n\n\n  runTransaction(updateFunction) {\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings must be an object.'));\n    }\n\n    if (hop(settings, 'host') && !isString(settings.host)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.host must be a string.'));\n    }\n\n    if (hop(settings, 'persistence') && !isBoolean(settings.persistence)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.persistence must be boolean.'));\n    }\n\n    if (hop(settings, 'cacheSizeBytes')) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.cacheSizeBytes must be number.'));\n      }\n\n      if (settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < MIN_CACHE_SIZE) {\n        return Promise.reject(new Error(`Firestore.settings failed: settings.cacheSizeBytes must be set to ${MIN_CACHE_SIZE} at least bytes.`));\n      }\n    }\n\n    if (hop(settings, 'ssl') && !isBoolean(settings.ssl)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.ssl must be boolean.'));\n    }\n\n    if (hop(settings, 'timestampsInSnapshots') && !isBoolean(settings.timestampsInSnapshots)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.timestampsInSnapshots must be boolean.'));\n    }\n\n    return getNativeModule(this).settings(settings);\n  }\n  /**\n   * -------------\n   *  UNSUPPORTED\n   * -------------\n   */\n\n\n  enablePersistence() {\n    console.warn('Due to restrictions in the native SDK, persistence must be configured in firebase.firestore().settings()');\n    return Promise.resolve();\n  }\n  /**\n   * -------------\n   *   INTERNALS\n   * -------------\n   */\n\n  /**\n   * Internal collection sync listener\n   *\n   * @param event\n   * @private\n   */\n\n\n  _onCollectionSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshot:${event.listenerId}`), event.querySnapshot);\n    }\n  }\n  /**\n   * Internal document sync listener\n   *\n   * @param event\n   * @private\n   */\n\n\n  _onDocumentSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshot:${event.listenerId}`), event.documentSnapshot);\n    }\n  }\n\n}\nexport const statics = {\n  Blob,\n  FieldPath,\n  FieldValue,\n  GeoPoint,\n  Timestamp,\n  CACHE_SIZE_UNLIMITED,\n\n  enableLogging(enabled) {\n    // DEPRECATED: Remove method in v4.1.0\n    console.warn('firebase.firestore.enableLogging is deprecated, use firebase.firestore().setLogLevel instead.');\n    this.setLogLevel(enabled ? 'debug' : 'silent');\n  },\n\n  setLogLevel(logLevel) {\n    if (LogLevels.indexOf(logLevel) === -1) {\n      throw new Error('Argument `logLevel` must be one of: `debug`, `error`, `silent`');\n    }\n\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].setLogLevel(logLevel);\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"script"}