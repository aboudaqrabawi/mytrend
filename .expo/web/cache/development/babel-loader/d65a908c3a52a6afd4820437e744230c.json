{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _events = require(\"../../utils/events\");\n\nvar _log = require(\"../../utils/log\");\n\nvar _ModuleBase2 = _interopRequireDefault(require(\"../../utils/ModuleBase\"));\n\nvar _native = require(\"../../utils/native\");\n\nvar _utils = require(\"../../utils\");\n\nvar _AndroidAction = _interopRequireDefault(require(\"./AndroidAction\"));\n\nvar _AndroidChannel = _interopRequireDefault(require(\"./AndroidChannel\"));\n\nvar _AndroidChannelGroup = _interopRequireDefault(require(\"./AndroidChannelGroup\"));\n\nvar _AndroidNotifications = _interopRequireDefault(require(\"./AndroidNotifications\"));\n\nvar _IOSNotifications = _interopRequireDefault(require(\"./IOSNotifications\"));\n\nvar _AndroidRemoteInput = _interopRequireDefault(require(\"./AndroidRemoteInput\"));\n\nvar _Notification = _interopRequireDefault(require(\"./Notification\"));\n\nvar _types = require(\"./types\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NATIVE_EVENTS = ['notifications_notification_displayed', 'notifications_notification_opened', 'notifications_notification_received'];\nvar MODULE_NAME = 'RNFirebaseNotifications';\nexports.MODULE_NAME = MODULE_NAME;\nvar NAMESPACE = 'notifications';\nexports.NAMESPACE = NAMESPACE;\n\nvar Notifications = function (_ModuleBase) {\n  (0, _inherits2.default)(Notifications, _ModuleBase);\n\n  var _super = _createSuper(Notifications);\n\n  function Notifications(app) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Notifications);\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      hasCustomUrlSupport: false,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      namespace: NAMESPACE\n    });\n    _this._android = new _AndroidNotifications.default((0, _assertThisInitialized2.default)(_this));\n    _this._ios = new _IOSNotifications.default((0, _assertThisInitialized2.default)(_this));\n\n    _events.SharedEventEmitter.addListener('notifications_notification_displayed', function (notification) {\n      _events.SharedEventEmitter.emit('onNotificationDisplayed', new _Notification.default(notification, (0, _assertThisInitialized2.default)(_this)));\n    });\n\n    _events.SharedEventEmitter.addListener('notifications_notification_opened', function (notificationOpen) {\n      _events.SharedEventEmitter.emit('onNotificationOpened', {\n        action: notificationOpen.action,\n        notification: new _Notification.default(notificationOpen.notification, (0, _assertThisInitialized2.default)(_this)),\n        results: notificationOpen.results\n      });\n    });\n\n    _events.SharedEventEmitter.addListener('notifications_notification_received', function (notification) {\n      _events.SharedEventEmitter.emit('onNotification', new _Notification.default(notification, (0, _assertThisInitialized2.default)(_this)));\n    });\n\n    if (_reactNative.Platform.OS === 'ios') {\n      (0, _native.getNativeModule)((0, _assertThisInitialized2.default)(_this)).jsInitialised();\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Notifications, [{\n    key: \"android\",\n    get: function get() {\n      return this._android;\n    }\n  }, {\n    key: \"ios\",\n    get: function get() {\n      return this._ios;\n    }\n  }, {\n    key: \"cancelAllNotifications\",\n    value: function cancelAllNotifications() {\n      return (0, _native.getNativeModule)(this).cancelAllNotifications();\n    }\n  }, {\n    key: \"cancelNotification\",\n    value: function cancelNotification(notificationId) {\n      if (!notificationId) {\n        return Promise.reject(new Error('Notifications: cancelNotification expects a `notificationId`'));\n      }\n\n      return (0, _native.getNativeModule)(this).cancelNotification(notificationId);\n    }\n  }, {\n    key: \"displayNotification\",\n    value: function displayNotification(notification) {\n      if (!(notification instanceof _Notification.default)) {\n        return Promise.reject(new Error(\"Notifications:displayNotification expects a 'Notification' but got type \" + typeof notification));\n      }\n\n      try {\n        return (0, _native.getNativeModule)(this).displayNotification(notification.build());\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n  }, {\n    key: \"getBadge\",\n    value: function getBadge() {\n      return (0, _native.getNativeModule)(this).getBadge();\n    }\n  }, {\n    key: \"getInitialNotification\",\n    value: function getInitialNotification() {\n      var _this2 = this;\n\n      return (0, _native.getNativeModule)(this).getInitialNotification().then(function (notificationOpen) {\n        if (notificationOpen) {\n          return {\n            action: notificationOpen.action,\n            notification: new _Notification.default(notificationOpen.notification, _this2),\n            results: notificationOpen.results\n          };\n        }\n\n        return null;\n      });\n    }\n  }, {\n    key: \"getScheduledNotifications\",\n    value: function getScheduledNotifications() {\n      return (0, _native.getNativeModule)(this).getScheduledNotifications();\n    }\n  }, {\n    key: \"onNotification\",\n    value: function onNotification(nextOrObserver) {\n      var _this3 = this;\n\n      var listener;\n\n      if ((0, _utils.isFunction)(nextOrObserver)) {\n        listener = nextOrObserver;\n      } else if ((0, _utils.isObject)(nextOrObserver) && (0, _utils.isFunction)(nextOrObserver.next)) {\n        listener = nextOrObserver.next;\n      } else {\n        throw new Error('Notifications.onNotification failed: First argument must be a function or observer object with a `next` function.');\n      }\n\n      (0, _log.getLogger)(this).info('Creating onNotification listener');\n\n      _events.SharedEventEmitter.addListener('onNotification', listener);\n\n      return function () {\n        (0, _log.getLogger)(_this3).info('Removing onNotification listener');\n\n        _events.SharedEventEmitter.removeListener('onNotification', listener);\n      };\n    }\n  }, {\n    key: \"onNotificationDisplayed\",\n    value: function onNotificationDisplayed(nextOrObserver) {\n      var _this4 = this;\n\n      var listener;\n\n      if ((0, _utils.isFunction)(nextOrObserver)) {\n        listener = nextOrObserver;\n      } else if ((0, _utils.isObject)(nextOrObserver) && (0, _utils.isFunction)(nextOrObserver.next)) {\n        listener = nextOrObserver.next;\n      } else {\n        throw new Error('Notifications.onNotificationDisplayed failed: First argument must be a function or observer object with a `next` function.');\n      }\n\n      (0, _log.getLogger)(this).info('Creating onNotificationDisplayed listener');\n\n      _events.SharedEventEmitter.addListener('onNotificationDisplayed', listener);\n\n      return function () {\n        (0, _log.getLogger)(_this4).info('Removing onNotificationDisplayed listener');\n\n        _events.SharedEventEmitter.removeListener('onNotificationDisplayed', listener);\n      };\n    }\n  }, {\n    key: \"onNotificationOpened\",\n    value: function onNotificationOpened(nextOrObserver) {\n      var _this5 = this;\n\n      var listener;\n\n      if ((0, _utils.isFunction)(nextOrObserver)) {\n        listener = nextOrObserver;\n      } else if ((0, _utils.isObject)(nextOrObserver) && (0, _utils.isFunction)(nextOrObserver.next)) {\n        listener = nextOrObserver.next;\n      } else {\n        throw new Error('Notifications.onNotificationOpened failed: First argument must be a function or observer object with a `next` function.');\n      }\n\n      (0, _log.getLogger)(this).info('Creating onNotificationOpened listener');\n\n      _events.SharedEventEmitter.addListener('onNotificationOpened', listener);\n\n      return function () {\n        (0, _log.getLogger)(_this5).info('Removing onNotificationOpened listener');\n\n        _events.SharedEventEmitter.removeListener('onNotificationOpened', listener);\n      };\n    }\n  }, {\n    key: \"removeAllDeliveredNotifications\",\n    value: function removeAllDeliveredNotifications() {\n      return (0, _native.getNativeModule)(this).removeAllDeliveredNotifications();\n    }\n  }, {\n    key: \"removeDeliveredNotification\",\n    value: function removeDeliveredNotification(notificationId) {\n      if (!notificationId) {\n        return Promise.reject(new Error('Notifications: removeDeliveredNotification expects a `notificationId`'));\n      }\n\n      return (0, _native.getNativeModule)(this).removeDeliveredNotification(notificationId);\n    }\n  }, {\n    key: \"scheduleNotification\",\n    value: function scheduleNotification(notification, schedule) {\n      if (!(notification instanceof _Notification.default)) {\n        return Promise.reject(new Error(\"Notifications:scheduleNotification expects a 'Notification' but got type \" + typeof notification));\n      }\n\n      try {\n        var nativeNotification = notification.build();\n        nativeNotification.schedule = schedule;\n        return (0, _native.getNativeModule)(this).scheduleNotification(nativeNotification);\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n  }, {\n    key: \"setBadge\",\n    value: function setBadge(badge) {\n      return (0, _native.getNativeModule)(this).setBadge(badge);\n    }\n  }]);\n  return Notifications;\n}(_ModuleBase2.default);\n\nexports.default = Notifications;\nvar statics = {\n  Android: {\n    Action: _AndroidAction.default,\n    BadgeIconType: _types.BadgeIconType,\n    Category: _types.Category,\n    Channel: _AndroidChannel.default,\n    ChannelGroup: _AndroidChannelGroup.default,\n    Defaults: _types.Defaults,\n    GroupAlert: _types.GroupAlert,\n    Importance: _types.Importance,\n    Priority: _types.Priority,\n    RemoteInput: _AndroidRemoteInput.default,\n    SemanticAction: _types.SemanticAction,\n    Visibility: _types.Visibility\n  },\n  Notification: _Notification.default\n};\nexports.statics = statics;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/notifications/index.js"],"names":["NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Notifications","app","events","hasCustomUrlSupport","moduleName","hasMultiAppSupport","namespace","_android","AndroidNotifications","_ios","IOSNotifications","SharedEventEmitter","addListener","notification","emit","Notification","notificationOpen","action","results","Platform","OS","jsInitialised","cancelAllNotifications","notificationId","Promise","reject","Error","cancelNotification","displayNotification","build","error","getBadge","getInitialNotification","then","getScheduledNotifications","nextOrObserver","listener","next","info","removeListener","removeAllDeliveredNotifications","removeDeliveredNotification","schedule","nativeNotification","scheduleNotification","badge","setBadge","ModuleBase","statics","Android","Action","AndroidAction","BadgeIconType","Category","Channel","AndroidChannel","ChannelGroup","AndroidChannelGroup","Defaults","GroupAlert","Importance","Priority","RemoteInput","AndroidRemoteInput","SemanticAction","Visibility"],"mappings":";;;;;;;;;;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AACA,IAAMA,aAAa,GAAG,CAAC,sCAAD,EAAyC,mCAAzC,EAA8E,qCAA9E,CAAtB;AACO,IAAMC,WAAW,GAAG,yBAApB;;AACA,IAAMC,SAAS,GAAG,eAAlB;;;IAgBcC,a;;;;;AACnB,yBAAYC,GAAZ,EAAiB;AAAA;;AAAA;AACf,8BAAMA,GAAN,EAAW;AACTC,MAAAA,MAAM,EAAEL,aADC;AAETM,MAAAA,mBAAmB,EAAE,KAFZ;AAGTC,MAAAA,UAAU,EAAEN,WAHH;AAITO,MAAAA,kBAAkB,EAAE,KAJX;AAKTC,MAAAA,SAAS,EAAEP;AALF,KAAX;AAOA,UAAKQ,QAAL,GAAgB,IAAIC,6BAAJ,6CAAhB;AACA,UAAKC,IAAL,GAAY,IAAIC,yBAAJ,6CAAZ;;AACAC,+BAAmBC,WAAnB,CAEA,sCAFA,EAEwC,UAAAC,YAAY,EAAI;AACtDF,iCAAmBG,IAAnB,CAAwB,yBAAxB,EAAmD,IAAIC,qBAAJ,CAAiBF,YAAjB,8CAAnD;AACD,KAJD;;AAKAF,+BAAmBC,WAAnB,CAEA,mCAFA,EAEqC,UAAAI,gBAAgB,EAAI;AACvDL,iCAAmBG,IAAnB,CAAwB,sBAAxB,EAAgD;AAC9CG,QAAAA,MAAM,EAAED,gBAAgB,CAACC,MADqB;AAE9CJ,QAAAA,YAAY,EAAE,IAAIE,qBAAJ,CAAiBC,gBAAgB,CAACH,YAAlC,8CAFgC;AAG9CK,QAAAA,OAAO,EAAEF,gBAAgB,CAACE;AAHoB,OAAhD;AAKD,KARD;;AASAP,+BAAmBC,WAAnB,CAEA,qCAFA,EAEuC,UAAAC,YAAY,EAAI;AACrDF,iCAAmBG,IAAnB,CAAwB,gBAAxB,EAA0C,IAAIC,qBAAJ,CAAiBF,YAAjB,8CAA1C;AACD,KAJD;;AAMA,QAAIM,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,gFAAsBC,aAAtB;AACD;;AAhCc;AAiChB;;;;SAED,eAAc;AACZ,aAAO,KAAKd,QAAZ;AACD;;;SAED,eAAU;AACR,aAAO,KAAKE,IAAZ;AACD;;;WAMD,kCAAyB;AACvB,aAAO,6BAAgB,IAAhB,EAAsBa,sBAAtB,EAAP;AACD;;;WAOD,4BAAmBC,cAAnB,EAAmC;AACjC,UAAI,CAACA,cAAL,EAAqB;AACnB,eAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,8DAAV,CAAf,CAAP;AACD;;AAED,aAAO,6BAAgB,IAAhB,EAAsBC,kBAAtB,CAAyCJ,cAAzC,CAAP;AACD;;;WAQD,6BAAoBV,YAApB,EAAkC;AAChC,UAAI,EAAEA,YAAY,YAAYE,qBAA1B,CAAJ,EAA6C;AAC3C,eAAOS,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,8EAAqF,OAAOb,YAA5F,CAAf,CAAP;AACD;;AAED,UAAI;AACF,eAAO,6BAAgB,IAAhB,EAAsBe,mBAAtB,CAA0Cf,YAAY,CAACgB,KAAb,EAA1C,CAAP;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACd,eAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACD;AACF;;;WAED,oBAAW;AACT,aAAO,6BAAgB,IAAhB,EAAsBC,QAAtB,EAAP;AACD;;;WAED,kCAAyB;AAAA;;AACvB,aAAO,6BAAgB,IAAhB,EAAsBC,sBAAtB,GAA+CC,IAA/C,CAAoD,UAAAjB,gBAAgB,EAAI;AAC7E,YAAIA,gBAAJ,EAAsB;AACpB,iBAAO;AACLC,YAAAA,MAAM,EAAED,gBAAgB,CAACC,MADpB;AAELJ,YAAAA,YAAY,EAAE,IAAIE,qBAAJ,CAAiBC,gBAAgB,CAACH,YAAlC,EAAgD,MAAhD,CAFT;AAGLK,YAAAA,OAAO,EAAEF,gBAAgB,CAACE;AAHrB,WAAP;AAKD;;AAED,eAAO,IAAP;AACD,OAVM,CAAP;AAWD;;;WAOD,qCAA4B;AAC1B,aAAO,6BAAgB,IAAhB,EAAsBgB,yBAAtB,EAAP;AACD;;;WAED,wBAAeC,cAAf,EAA+B;AAAA;;AAC7B,UAAIC,QAAJ;;AAEA,UAAI,uBAAWD,cAAX,CAAJ,EAAgC;AAC9BC,QAAAA,QAAQ,GAAGD,cAAX;AACD,OAFD,MAEO,IAAI,qBAASA,cAAT,KAA4B,uBAAWA,cAAc,CAACE,IAA1B,CAAhC,EAAiE;AACtED,QAAAA,QAAQ,GAAGD,cAAc,CAACE,IAA1B;AACD,OAFM,MAEA;AACL,cAAM,IAAIX,KAAJ,CAAU,mHAAV,CAAN;AACD;;AAED,0BAAU,IAAV,EAAgBY,IAAhB,CAAqB,kCAArB;;AACA3B,iCAAmBC,WAAnB,CAA+B,gBAA/B,EAAiDwB,QAAjD;;AACA,aAAO,YAAM;AACX,4BAAU,MAAV,EAAgBE,IAAhB,CAAqB,kCAArB;;AACA3B,mCAAmB4B,cAAnB,CAAkC,gBAAlC,EAAoDH,QAApD;AACD,OAHD;AAID;;;WAED,iCAAwBD,cAAxB,EAAwC;AAAA;;AACtC,UAAIC,QAAJ;;AAEA,UAAI,uBAAWD,cAAX,CAAJ,EAAgC;AAC9BC,QAAAA,QAAQ,GAAGD,cAAX;AACD,OAFD,MAEO,IAAI,qBAASA,cAAT,KAA4B,uBAAWA,cAAc,CAACE,IAA1B,CAAhC,EAAiE;AACtED,QAAAA,QAAQ,GAAGD,cAAc,CAACE,IAA1B;AACD,OAFM,MAEA;AACL,cAAM,IAAIX,KAAJ,CAAU,4HAAV,CAAN;AACD;;AAED,0BAAU,IAAV,EAAgBY,IAAhB,CAAqB,2CAArB;;AACA3B,iCAAmBC,WAAnB,CAA+B,yBAA/B,EAA0DwB,QAA1D;;AACA,aAAO,YAAM;AACX,4BAAU,MAAV,EAAgBE,IAAhB,CAAqB,2CAArB;;AACA3B,mCAAmB4B,cAAnB,CAAkC,yBAAlC,EAA6DH,QAA7D;AACD,OAHD;AAID;;;WAED,8BAAqBD,cAArB,EAAqC;AAAA;;AACnC,UAAIC,QAAJ;;AAEA,UAAI,uBAAWD,cAAX,CAAJ,EAAgC;AAC9BC,QAAAA,QAAQ,GAAGD,cAAX;AACD,OAFD,MAEO,IAAI,qBAASA,cAAT,KAA4B,uBAAWA,cAAc,CAACE,IAA1B,CAAhC,EAAiE;AACtED,QAAAA,QAAQ,GAAGD,cAAc,CAACE,IAA1B;AACD,OAFM,MAEA;AACL,cAAM,IAAIX,KAAJ,CAAU,yHAAV,CAAN;AACD;;AAED,0BAAU,IAAV,EAAgBY,IAAhB,CAAqB,wCAArB;;AACA3B,iCAAmBC,WAAnB,CAA+B,sBAA/B,EAAuDwB,QAAvD;;AACA,aAAO,YAAM;AACX,4BAAU,MAAV,EAAgBE,IAAhB,CAAqB,wCAArB;;AACA3B,mCAAmB4B,cAAnB,CAAkC,sBAAlC,EAA0DH,QAA1D;AACD,OAHD;AAID;;;WAMD,2CAAkC;AAChC,aAAO,6BAAgB,IAAhB,EAAsBI,+BAAtB,EAAP;AACD;;;WAOD,qCAA4BjB,cAA5B,EAA4C;AAC1C,UAAI,CAACA,cAAL,EAAqB;AACnB,eAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,uEAAV,CAAf,CAAP;AACD;;AAED,aAAO,6BAAgB,IAAhB,EAAsBe,2BAAtB,CAAkDlB,cAAlD,CAAP;AACD;;;WAQD,8BAAqBV,YAArB,EAAmC6B,QAAnC,EAA6C;AAC3C,UAAI,EAAE7B,YAAY,YAAYE,qBAA1B,CAAJ,EAA6C;AAC3C,eAAOS,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,+EAAsF,OAAOb,YAA7F,CAAf,CAAP;AACD;;AAED,UAAI;AACF,YAAM8B,kBAAkB,GAAG9B,YAAY,CAACgB,KAAb,EAA3B;AACAc,QAAAA,kBAAkB,CAACD,QAAnB,GAA8BA,QAA9B;AACA,eAAO,6BAAgB,IAAhB,EAAsBE,oBAAtB,CAA2CD,kBAA3C,CAAP;AACD,OAJD,CAIE,OAAOb,KAAP,EAAc;AACd,eAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACD;AACF;;;WAED,kBAASe,KAAT,EAAgB;AACd,aAAO,6BAAgB,IAAhB,EAAsBC,QAAtB,CAA+BD,KAA/B,CAAP;AACD;;;EAlNwCE,oB;;;AAqNpC,IAAMC,OAAO,GAAG;AACrBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAEC,sBADD;AAEPC,IAAAA,aAAa,EAAbA,oBAFO;AAGPC,IAAAA,QAAQ,EAARA,eAHO;AAIPC,IAAAA,OAAO,EAAEC,uBAJF;AAKPC,IAAAA,YAAY,EAAEC,4BALP;AAMPC,IAAAA,QAAQ,EAARA,eANO;AAOPC,IAAAA,UAAU,EAAVA,iBAPO;AAQPC,IAAAA,UAAU,EAAVA,iBARO;AASPC,IAAAA,QAAQ,EAARA,eATO;AAUPC,IAAAA,WAAW,EAAEC,2BAVN;AAWPC,IAAAA,cAAc,EAAdA,qBAXO;AAYPC,IAAAA,UAAU,EAAVA;AAZO,GADY;AAerBlD,EAAAA,YAAY,EAAZA;AAfqB,CAAhB","sourcesContent":["/**\n * \n * Notifications representation wrapper\n */\nimport { Platform } from 'react-native';\nimport { SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport { isFunction, isObject } from '../../utils';\nimport AndroidAction from './AndroidAction';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport AndroidNotifications from './AndroidNotifications';\nimport IOSNotifications from './IOSNotifications';\nimport AndroidRemoteInput from './AndroidRemoteInput';\nimport Notification from './Notification';\nimport { BadgeIconType, Category, Defaults, GroupAlert, Importance, Priority, SemanticAction, Visibility } from './types';\nconst NATIVE_EVENTS = ['notifications_notification_displayed', 'notifications_notification_opened', 'notifications_notification_received'];\nexport const MODULE_NAME = 'RNFirebaseNotifications';\nexport const NAMESPACE = 'notifications'; // iOS 8/9 scheduling\n// fireDate: Date;\n// timeZone: TimeZone;\n// repeatInterval: NSCalendar.Unit;\n// repeatCalendar: Calendar;\n// region: CLRegion;\n// regionTriggersOnce: boolean;\n// iOS 10 scheduling\n// TODO\n// Android scheduling\n// TODO\n\n/**\n * @class Notifications\n */\n\nexport default class Notifications extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      hasCustomUrlSupport: false,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      namespace: NAMESPACE\n    });\n    this._android = new AndroidNotifications(this);\n    this._ios = new IOSNotifications(this);\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onNotificationDisplayed\n    'notifications_notification_displayed', notification => {\n      SharedEventEmitter.emit('onNotificationDisplayed', new Notification(notification, this));\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onNotificationOpened\n    'notifications_notification_opened', notificationOpen => {\n      SharedEventEmitter.emit('onNotificationOpened', {\n        action: notificationOpen.action,\n        notification: new Notification(notificationOpen.notification, this),\n        results: notificationOpen.results\n      });\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onNotification\n    'notifications_notification_received', notification => {\n      SharedEventEmitter.emit('onNotification', new Notification(notification, this));\n    }); // Tell the native module that we're ready to receive events\n\n    if (Platform.OS === 'ios') {\n      getNativeModule(this).jsInitialised();\n    }\n  }\n\n  get android() {\n    return this._android;\n  }\n\n  get ios() {\n    return this._ios;\n  }\n  /**\n   * Cancel all notifications\n   */\n\n\n  cancelAllNotifications() {\n    return getNativeModule(this).cancelAllNotifications();\n  }\n  /**\n   * Cancel a notification by id.\n   * @param notificationId\n   */\n\n\n  cancelNotification(notificationId) {\n    if (!notificationId) {\n      return Promise.reject(new Error('Notifications: cancelNotification expects a `notificationId`'));\n    }\n\n    return getNativeModule(this).cancelNotification(notificationId);\n  }\n  /**\n   * Display a notification\n   * @param notification\n   * @returns {*}\n   */\n\n\n  displayNotification(notification) {\n    if (!(notification instanceof Notification)) {\n      return Promise.reject(new Error(`Notifications:displayNotification expects a 'Notification' but got type ${typeof notification}`));\n    }\n\n    try {\n      return getNativeModule(this).displayNotification(notification.build());\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  getBadge() {\n    return getNativeModule(this).getBadge();\n  }\n\n  getInitialNotification() {\n    return getNativeModule(this).getInitialNotification().then(notificationOpen => {\n      if (notificationOpen) {\n        return {\n          action: notificationOpen.action,\n          notification: new Notification(notificationOpen.notification, this),\n          results: notificationOpen.results\n        };\n      }\n\n      return null;\n    });\n  }\n  /**\n   * Returns an array of all scheduled notifications\n   * @returns {Promise.<Array>}\n   */\n\n\n  getScheduledNotifications() {\n    return getNativeModule(this).getScheduledNotifications();\n  }\n\n  onNotification(nextOrObserver) {\n    let listener;\n\n    if (isFunction(nextOrObserver)) {\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error('Notifications.onNotification failed: First argument must be a function or observer object with a `next` function.');\n    }\n\n    getLogger(this).info('Creating onNotification listener');\n    SharedEventEmitter.addListener('onNotification', listener);\n    return () => {\n      getLogger(this).info('Removing onNotification listener');\n      SharedEventEmitter.removeListener('onNotification', listener);\n    };\n  }\n\n  onNotificationDisplayed(nextOrObserver) {\n    let listener;\n\n    if (isFunction(nextOrObserver)) {\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error('Notifications.onNotificationDisplayed failed: First argument must be a function or observer object with a `next` function.');\n    }\n\n    getLogger(this).info('Creating onNotificationDisplayed listener');\n    SharedEventEmitter.addListener('onNotificationDisplayed', listener);\n    return () => {\n      getLogger(this).info('Removing onNotificationDisplayed listener');\n      SharedEventEmitter.removeListener('onNotificationDisplayed', listener);\n    };\n  }\n\n  onNotificationOpened(nextOrObserver) {\n    let listener;\n\n    if (isFunction(nextOrObserver)) {\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error('Notifications.onNotificationOpened failed: First argument must be a function or observer object with a `next` function.');\n    }\n\n    getLogger(this).info('Creating onNotificationOpened listener');\n    SharedEventEmitter.addListener('onNotificationOpened', listener);\n    return () => {\n      getLogger(this).info('Removing onNotificationOpened listener');\n      SharedEventEmitter.removeListener('onNotificationOpened', listener);\n    };\n  }\n  /**\n   * Remove all delivered notifications.\n   */\n\n\n  removeAllDeliveredNotifications() {\n    return getNativeModule(this).removeAllDeliveredNotifications();\n  }\n  /**\n   * Remove a delivered notification.\n   * @param notificationId\n   */\n\n\n  removeDeliveredNotification(notificationId) {\n    if (!notificationId) {\n      return Promise.reject(new Error('Notifications: removeDeliveredNotification expects a `notificationId`'));\n    }\n\n    return getNativeModule(this).removeDeliveredNotification(notificationId);\n  }\n  /**\n   * Schedule a notification\n   * @param notification\n   * @returns {*}\n   */\n\n\n  scheduleNotification(notification, schedule) {\n    if (!(notification instanceof Notification)) {\n      return Promise.reject(new Error(`Notifications:scheduleNotification expects a 'Notification' but got type ${typeof notification}`));\n    }\n\n    try {\n      const nativeNotification = notification.build();\n      nativeNotification.schedule = schedule;\n      return getNativeModule(this).scheduleNotification(nativeNotification);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  setBadge(badge) {\n    return getNativeModule(this).setBadge(badge);\n  }\n\n}\nexport const statics = {\n  Android: {\n    Action: AndroidAction,\n    BadgeIconType,\n    Category,\n    Channel: AndroidChannel,\n    ChannelGroup: AndroidChannelGroup,\n    Defaults,\n    GroupAlert,\n    Importance,\n    Priority,\n    RemoteInput: AndroidRemoteInput,\n    SemanticAction,\n    Visibility\n  },\n  Notification\n};"]},"metadata":{},"sourceType":"script"}