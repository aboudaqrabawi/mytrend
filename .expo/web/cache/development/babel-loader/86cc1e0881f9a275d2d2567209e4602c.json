{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _Query = _interopRequireDefault(require(\"./Query\"));\n\nvar _DataSnapshot = _interopRequireDefault(require(\"./DataSnapshot\"));\n\nvar _OnDisconnect = _interopRequireDefault(require(\"./OnDisconnect\"));\n\nvar _log = require(\"../../utils/log\");\n\nvar _native = require(\"../../utils/native\");\n\nvar _ReferenceBase2 = _interopRequireDefault(require(\"../../utils/ReferenceBase\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _SyncTree = _interopRequireDefault(require(\"../../utils/SyncTree\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar listeners = 0;\nvar ReferenceEventTypes = {\n  value: 'value',\n  child_added: 'child_added',\n  child_removed: 'child_removed',\n  child_changed: 'child_changed',\n  child_moved: 'child_moved'\n};\n\nvar Reference = function (_ReferenceBase) {\n  (0, _inherits2.default)(Reference, _ReferenceBase);\n\n  var _super = _createSuper(Reference);\n\n  function Reference(database, path, existingModifiers) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Reference);\n    _this = _super.call(this, path);\n    _this._refListeners = {};\n    _this._database = database;\n    _this._query = new _Query.default((0, _assertThisInitialized2.default)(_this), existingModifiers);\n    (0, _log.getLogger)(database).debug('Created new Reference', _this._getRefKey());\n    return _this;\n  }\n\n  (0, _createClass2.default)(Reference, [{\n    key: \"keepSynced\",\n    value: function keepSynced(bool) {\n      return (0, _native.getNativeModule)(this._database).keepSynced(this._getRefKey(), this.path, this._query.getModifiers(), bool);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, onComplete) {\n      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).set(this.path, this._serializeAnyType(value)), onComplete);\n    }\n  }, {\n    key: \"setPriority\",\n    value: function setPriority(priority, onComplete) {\n      var _priority = this._serializeAnyType(priority);\n\n      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).setPriority(this.path, _priority), onComplete);\n    }\n  }, {\n    key: \"setWithPriority\",\n    value: function setWithPriority(value, priority, onComplete) {\n      var _value = this._serializeAnyType(value);\n\n      var _priority = this._serializeAnyType(priority);\n\n      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).setWithPriority(this.path, _value, _priority), onComplete);\n    }\n  }, {\n    key: \"update\",\n    value: function update(val, onComplete) {\n      var value = this._serializeObject(val);\n\n      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).update(this.path, value), onComplete);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(onComplete) {\n      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).remove(this.path), onComplete);\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(transactionUpdate, onComplete) {\n      var _this2 = this;\n\n      var applyLocally = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!(0, _utils.isFunction)(transactionUpdate)) {\n        return Promise.reject(new Error('Missing transactionUpdate function argument.'));\n      }\n\n      return new Promise(function (resolve, reject) {\n        var onCompleteWrapper = function onCompleteWrapper(error, committed, snapshotData) {\n          if ((0, _utils.isFunction)(onComplete)) {\n            if (error) {\n              onComplete(error, committed, null);\n            } else {\n              onComplete(null, committed, new _DataSnapshot.default(_this2, snapshotData));\n            }\n          }\n\n          if (error) return reject(error);\n          return resolve({\n            committed: committed,\n            snapshot: new _DataSnapshot.default(_this2, snapshotData)\n          });\n        };\n\n        _this2._database._transactionHandler.add(_this2, transactionUpdate, onCompleteWrapper, applyLocally);\n      });\n    }\n  }, {\n    key: \"once\",\n    value: function once() {\n      var _this3 = this;\n\n      var eventName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'value';\n      var successCallback = arguments.length > 1 ? arguments[1] : undefined;\n      var cancelOrContext = arguments.length > 2 ? arguments[2] : undefined;\n      var context = arguments.length > 3 ? arguments[3] : undefined;\n      return (0, _native.getNativeModule)(this._database).once(this._getRefKey(), this.path, this._query.getModifiers(), eventName).then(function (_ref) {\n        var snapshot = _ref.snapshot;\n\n        var _snapshot = new _DataSnapshot.default(_this3, snapshot);\n\n        if ((0, _utils.isFunction)(successCallback)) {\n          if ((0, _utils.isObject)(cancelOrContext)) successCallback.bind(cancelOrContext)(_snapshot);\n          if (context && (0, _utils.isObject)(context)) successCallback.bind(context)(_snapshot);\n          successCallback(_snapshot);\n        }\n\n        return _snapshot;\n      }).catch(function (error) {\n        if ((0, _utils.isFunction)(cancelOrContext)) return cancelOrContext(error);\n        throw error;\n      });\n    }\n  }, {\n    key: \"push\",\n    value: function push(value, onComplete) {\n      var name = (0, _utils.generatePushID)(this._database._serverTimeOffset);\n      var pushRef = this.child(name);\n      var thennablePushRef = this.child(name);\n      var promise;\n\n      if (value != null) {\n        promise = thennablePushRef.set(value, onComplete).then(function () {\n          return pushRef;\n        });\n      } else {\n        promise = Promise.resolve(pushRef);\n      }\n\n      thennablePushRef.then = promise.then.bind(promise);\n      thennablePushRef.catch = promise.catch.bind(promise);\n\n      if ((0, _utils.isFunction)(onComplete)) {\n        promise.catch(function () {});\n      }\n\n      return thennablePushRef;\n    }\n  }, {\n    key: \"orderByKey\",\n    value: function orderByKey() {\n      return this.orderBy('orderByKey');\n    }\n  }, {\n    key: \"orderByPriority\",\n    value: function orderByPriority() {\n      return this.orderBy('orderByPriority');\n    }\n  }, {\n    key: \"orderByValue\",\n    value: function orderByValue() {\n      return this.orderBy('orderByValue');\n    }\n  }, {\n    key: \"orderByChild\",\n    value: function orderByChild(key) {\n      return this.orderBy('orderByChild', key);\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(name, key) {\n      var newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n      newRef._query.orderBy(name, key);\n\n      return newRef;\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(limit) {\n      return this.limit('limitToLast', limit);\n    }\n  }, {\n    key: \"limitToFirst\",\n    value: function limitToFirst(limit) {\n      return this.limit('limitToFirst', limit);\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(name, _limit) {\n      var newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n      newRef._query.limit(name, _limit);\n\n      return newRef;\n    }\n  }, {\n    key: \"equalTo\",\n    value: function equalTo(value, key) {\n      return this.filter('equalTo', value, key);\n    }\n  }, {\n    key: \"endAt\",\n    value: function endAt(value, key) {\n      return this.filter('endAt', value, key);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt(value, key) {\n      return this.filter('startAt', value, key);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(name, value, key) {\n      var newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n      newRef._query.filter(name, value, key);\n\n      return newRef;\n    }\n  }, {\n    key: \"onDisconnect\",\n    value: function onDisconnect() {\n      return new _OnDisconnect.default(this);\n    }\n  }, {\n    key: \"child\",\n    value: function child(path) {\n      return new Reference(this._database, this.path + \"/\" + path);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\" + this._database.databaseUrl + this.path;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherRef) {\n      return !!otherRef && otherRef.constructor === Reference && otherRef.key === this.key && this._query.queryIdentifier() === otherRef._query.queryIdentifier();\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      if (this.path === '/') return null;\n      return new Reference(this._database, this.path.substring(0, this.path.lastIndexOf('/')));\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return this;\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return new Reference(this._database, '/');\n    }\n  }, {\n    key: \"_getRegistrationKey\",\n    value: function _getRegistrationKey(eventType) {\n      return \"$\" + this._database.databaseUrl + \"$/\" + this.path + \"$\" + this._query.queryIdentifier() + \"$\" + listeners + \"$\" + eventType;\n    }\n  }, {\n    key: \"_getRefKey\",\n    value: function _getRefKey() {\n      return \"$\" + this._database.databaseUrl + \"$/\" + this.path + \"$\" + this._query.queryIdentifier();\n    }\n  }, {\n    key: \"_serializeObject\",\n    value: function _serializeObject(obj) {\n      if (!(0, _utils.isObject)(obj)) return obj;\n      return (0, _utils.tryJSONParse)((0, _utils.tryJSONStringify)(obj));\n    }\n  }, {\n    key: \"_serializeAnyType\",\n    value: function _serializeAnyType(value) {\n      if ((0, _utils.isObject)(value)) {\n        return {\n          type: 'object',\n          value: this._serializeObject(value)\n        };\n      }\n\n      return {\n        type: typeof value,\n        value: value\n      };\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventType, callback, cancelCallbackOrContext, context) {\n      if (!eventType) {\n        throw new Error('Query.on failed: Function called with 0 arguments. Expects at least 2.');\n      }\n\n      if (!(0, _utils.isString)(eventType) || !ReferenceEventTypes[eventType]) {\n        throw new Error(\"Query.on failed: First argument must be a valid string event type: \\\"\" + Object.keys(ReferenceEventTypes).join(', ') + \"\\\"\");\n      }\n\n      if (!callback) {\n        throw new Error('Query.on failed: Function called with 1 argument. Expects at least 2.');\n      }\n\n      if (!(0, _utils.isFunction)(callback)) {\n        throw new Error('Query.on failed: Second argument must be a valid function.');\n      }\n\n      if (cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) && !(0, _utils.isObject)(context) && !(0, _utils.isObject)(cancelCallbackOrContext)) {\n        throw new Error('Query.on failed: Function called with 3 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n      }\n\n      if (cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) && context) {\n        throw new Error('Query.on failed: Function called with 4 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n      }\n\n      var eventRegistrationKey = this._getRegistrationKey(eventType);\n\n      var registrationCancellationKey = eventRegistrationKey + \"$cancelled\";\n\n      var _context = cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) ? cancelCallbackOrContext : context;\n\n      var registrationObj = {\n        eventType: eventType,\n        ref: this,\n        path: this.path,\n        key: this._getRefKey(),\n        appName: this._database.app.name,\n        dbURL: this._database.databaseUrl,\n        eventRegistrationKey: eventRegistrationKey\n      };\n\n      _SyncTree.default.addRegistration(_objectSpread(_objectSpread({}, registrationObj), {}, {\n        listener: _context ? callback.bind(_context) : callback\n      }));\n\n      if (cancelCallbackOrContext && (0, _utils.isFunction)(cancelCallbackOrContext)) {\n        _SyncTree.default.addRegistration({\n          ref: this,\n          once: true,\n          path: this.path,\n          key: this._getRefKey(),\n          appName: this._database.app.name,\n          dbURL: this._database.databaseUrl,\n          eventType: eventType + \"$cancelled\",\n          eventRegistrationKey: registrationCancellationKey,\n          listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext\n        });\n      }\n\n      (0, _native.getNativeModule)(this._database).on({\n        eventType: eventType,\n        path: this.path,\n        key: this._getRefKey(),\n        appName: this._database.app.name,\n        modifiers: this._query.getModifiers(),\n        hasCancellationCallback: (0, _utils.isFunction)(cancelCallbackOrContext),\n        registration: {\n          eventRegistrationKey: eventRegistrationKey,\n          key: registrationObj.key,\n          registrationCancellationKey: registrationCancellationKey\n        }\n      });\n      listeners += 1;\n      return callback;\n    }\n  }, {\n    key: \"off\",\n    value: function off() {\n      var eventType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var originalCallback = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!arguments.length) {\n        return _SyncTree.default.removeListenersForRegistrations(_SyncTree.default.getRegistrationsByPath(this.path));\n      }\n\n      if (eventType && (!(0, _utils.isString)(eventType) || !ReferenceEventTypes[eventType])) {\n        throw new Error(\"Query.off failed: First argument must be a valid string event type: \\\"\" + Object.keys(ReferenceEventTypes).join(', ') + \"\\\"\");\n      }\n\n      if (originalCallback && !(0, _utils.isFunction)(originalCallback)) {\n        throw new Error('Query.off failed: Function called with 2 arguments, but second optional argument was not a function.');\n      }\n\n      if (eventType && originalCallback) {\n        var registration = _SyncTree.default.getOneByPathEventListener(this.path, eventType, originalCallback);\n\n        if (!registration) return [];\n\n        _SyncTree.default.removeListenersForRegistrations([registration + \"$cancelled\"]);\n\n        return _SyncTree.default.removeListenerRegistrations(originalCallback, [registration]);\n      }\n\n      var registrations = _SyncTree.default.getRegistrationsByPathEvent(this.path, eventType);\n\n      _SyncTree.default.removeListenersForRegistrations(_SyncTree.default.getRegistrationsByPathEvent(this.path, eventType + \"$cancelled\"));\n\n      return _SyncTree.default.removeListenersForRegistrations(registrations);\n    }\n  }]);\n  return Reference;\n}(_ReferenceBase2.default);\n\nexports.default = Reference;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/database/Reference.js"],"names":["listeners","ReferenceEventTypes","value","child_added","child_removed","child_changed","child_moved","Reference","database","path","existingModifiers","_refListeners","_database","_query","Query","debug","_getRefKey","bool","keepSynced","getModifiers","onComplete","set","_serializeAnyType","priority","_priority","setPriority","_value","setWithPriority","val","_serializeObject","update","remove","transactionUpdate","applyLocally","Promise","reject","Error","resolve","onCompleteWrapper","error","committed","snapshotData","DataSnapshot","snapshot","_transactionHandler","add","eventName","successCallback","cancelOrContext","context","once","then","_snapshot","bind","catch","name","_serverTimeOffset","pushRef","child","thennablePushRef","promise","orderBy","key","newRef","limit","filter","OnDisconnect","databaseUrl","toString","otherRef","constructor","queryIdentifier","substring","lastIndexOf","eventType","obj","type","callback","cancelCallbackOrContext","Object","keys","join","eventRegistrationKey","_getRegistrationKey","registrationCancellationKey","_context","registrationObj","ref","appName","app","dbURL","SyncTree","addRegistration","listener","on","modifiers","hasCancellationCallback","registration","originalCallback","arguments","length","removeListenersForRegistrations","getRegistrationsByPath","getOneByPathEventListener","removeListenerRegistrations","registrations","getRegistrationsByPathEvent","ReferenceBase"],"mappings":"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","sourcesContent":["/**\n * \n * Database Reference representation wrapper\n */\nimport Query from './Query';\nimport DataSnapshot from './DataSnapshot';\nimport OnDisconnect from './OnDisconnect';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nimport ReferenceBase from '../../utils/ReferenceBase';\nimport { promiseOrCallback, isFunction, isObject, isString, tryJSONParse, tryJSONStringify, generatePushID } from '../../utils';\nimport SyncTree from '../../utils/SyncTree';\n// track all event registrations by path\nlet listeners = 0;\n/**\n * Enum for event types\n * @readonly\n * @enum {String}\n */\n\nconst ReferenceEventTypes = {\n  value: 'value',\n  child_added: 'child_added',\n  child_removed: 'child_removed',\n  child_changed: 'child_changed',\n  child_moved: 'child_moved'\n};\n\n/**\n * @typedef {String} ReferenceLocation - Path to location in the database, relative\n * to the root reference. Consists of a path where segments are separated by a\n * forward slash (/) and ends in a ReferenceKey - except the root location, which\n * has no ReferenceKey.\n *\n * @example\n * // root reference location: '/'\n * // non-root reference: '/path/to/referenceKey'\n */\n\n/**\n * @typedef {String} ReferenceKey - Identifier for each location that is unique to that\n * location, within the scope of its parent. The last part of a ReferenceLocation.\n */\n\n/**\n * Represents a specific location in your Database that can be used for\n * reading or writing data.\n *\n * You can reference the root using firebase.database().ref() or a child location\n * by calling firebase.database().ref(\"child/path\").\n *\n * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference\n * @class Reference\n * @extends ReferenceBase\n */\nexport default class Reference extends ReferenceBase {\n  constructor(database, path, existingModifiers) {\n    super(path);\n    this._refListeners = {};\n    this._database = database;\n    this._query = new Query(this, existingModifiers);\n    getLogger(database).debug('Created new Reference', this._getRefKey());\n  }\n  /**\n   * By calling `keepSynced(true)` on a location, the data for that location will\n   * automatically be downloaded and kept in sync, even when no listeners are\n   * attached for that location. Additionally, while a location is kept synced,\n   *  it will not be evicted from the persistent disk cache.\n   *\n   * @link https://firebase.google.com/docs/reference/android/com/google/firebase/database/Query.html#keepSynced(boolean)\n   * @param bool\n   * @returns {*}\n   */\n\n\n  keepSynced(bool) {\n    return getNativeModule(this._database).keepSynced(this._getRefKey(), this.path, this._query.getModifiers(), bool);\n  }\n  /**\n   * Writes data to this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#set\n   * @param value\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  set(value, onComplete) {\n    return promiseOrCallback(getNativeModule(this._database).set(this.path, this._serializeAnyType(value)), onComplete);\n  }\n  /**\n   * Sets a priority for the data at this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#setPriority\n   * @param priority\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  setPriority(priority, onComplete) {\n    const _priority = this._serializeAnyType(priority);\n\n    return promiseOrCallback(getNativeModule(this._database).setPriority(this.path, _priority), onComplete);\n  }\n  /**\n   * Writes data the Database location. Like set() but also specifies the priority for that data.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#setWithPriority\n   * @param value\n   * @param priority\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  setWithPriority(value, priority, onComplete) {\n    const _value = this._serializeAnyType(value);\n\n    const _priority = this._serializeAnyType(priority);\n\n    return promiseOrCallback(getNativeModule(this._database).setWithPriority(this.path, _value, _priority), onComplete);\n  }\n  /**\n   * Writes multiple values to the Database at once.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#update\n   * @param val\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  update(val, onComplete) {\n    const value = this._serializeObject(val);\n\n    return promiseOrCallback(getNativeModule(this._database).update(this.path, value), onComplete);\n  }\n  /**\n   * Removes the data at this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#remove\n   * @param onComplete\n   * @return {Promise}\n   */\n\n\n  remove(onComplete) {\n    return promiseOrCallback(getNativeModule(this._database).remove(this.path), onComplete);\n  }\n  /**\n   * Atomically modifies the data at this location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#transaction\n   * @param transactionUpdate\n   * @param onComplete\n   * @param applyLocally\n   */\n\n\n  transaction(transactionUpdate, onComplete, applyLocally = false) {\n    if (!isFunction(transactionUpdate)) {\n      return Promise.reject(new Error('Missing transactionUpdate function argument.'));\n    }\n\n    return new Promise((resolve, reject) => {\n      const onCompleteWrapper = (error, committed, snapshotData) => {\n        if (isFunction(onComplete)) {\n          if (error) {\n            onComplete(error, committed, null);\n          } else {\n            onComplete(null, committed, new DataSnapshot(this, snapshotData));\n          }\n        }\n\n        if (error) return reject(error);\n        return resolve({\n          committed,\n          snapshot: new DataSnapshot(this, snapshotData)\n        });\n      }; // start the transaction natively\n\n\n      this._database._transactionHandler.add(this, transactionUpdate, onCompleteWrapper, applyLocally);\n    });\n  }\n  /**\n   *\n   * @param eventName\n   * @param successCallback\n   * @param cancelOrContext\n   * @param context\n   * @returns {Promise.<any>}\n   */\n\n\n  once(eventName = 'value', successCallback, cancelOrContext, context) {\n    return getNativeModule(this._database).once(this._getRefKey(), this.path, this._query.getModifiers(), eventName).then(({\n      snapshot\n    }) => {\n      const _snapshot = new DataSnapshot(this, snapshot);\n\n      if (isFunction(successCallback)) {\n        if (isObject(cancelOrContext)) successCallback.bind(cancelOrContext)(_snapshot);\n        if (context && isObject(context)) successCallback.bind(context)(_snapshot);\n        successCallback(_snapshot);\n      }\n\n      return _snapshot;\n    }).catch(error => {\n      if (isFunction(cancelOrContext)) return cancelOrContext(error);\n      throw error;\n    });\n  }\n  /**\n   *\n   * @param value\n   * @param onComplete\n   * @returns {*}\n   */\n\n\n  push(value, onComplete) {\n    const name = generatePushID(this._database._serverTimeOffset);\n    const pushRef = this.child(name);\n    const thennablePushRef = this.child(name);\n    let promise;\n\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.catch.bind(promise);\n\n    if (isFunction(onComplete)) {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n  /**\n   * MODIFIERS\n   */\n\n  /**\n   *\n   * @returns {Reference}\n   */\n\n\n  orderByKey() {\n    return this.orderBy('orderByKey');\n  }\n  /**\n   *\n   * @returns {Reference}\n   */\n\n\n  orderByPriority() {\n    return this.orderBy('orderByPriority');\n  }\n  /**\n   *\n   * @returns {Reference}\n   */\n\n\n  orderByValue() {\n    return this.orderBy('orderByValue');\n  }\n  /**\n   *\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  orderByChild(key) {\n    return this.orderBy('orderByChild', key);\n  }\n  /**\n   *\n   * @param name\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  orderBy(name, key) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n    newRef._query.orderBy(name, key);\n\n    return newRef;\n  }\n  /**\n   * LIMITS\n   */\n\n  /**\n   *\n   * @param limit\n   * @returns {Reference}\n   */\n\n\n  limitToLast(limit) {\n    return this.limit('limitToLast', limit);\n  }\n  /**\n   *\n   * @param limit\n   * @returns {Reference}\n   */\n\n\n  limitToFirst(limit) {\n    return this.limit('limitToFirst', limit);\n  }\n  /**\n   *\n   * @param name\n   * @param limit\n   * @returns {Reference}\n   */\n\n\n  limit(name, limit) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n    newRef._query.limit(name, limit);\n\n    return newRef;\n  }\n  /**\n   * FILTERS\n   */\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  equalTo(value, key) {\n    return this.filter('equalTo', value, key);\n  }\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  endAt(value, key) {\n    return this.filter('endAt', value, key);\n  }\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  startAt(value, key) {\n    return this.filter('startAt', value, key);\n  }\n  /**\n   *\n   * @param name\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  filter(name, value, key) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n    newRef._query.filter(name, value, key);\n\n    return newRef;\n  }\n  /**\n   *\n   * @returns {OnDisconnect}\n   */\n\n\n  onDisconnect() {\n    return new OnDisconnect(this);\n  }\n  /**\n   * Creates a Reference to a child of the current Reference, using a relative path.\n   * No validation is performed on the path to ensure it has a valid format.\n   * @param {String} path relative to current ref's location\n   * @returns {!Reference} A new Reference to the path provided, relative to the current\n   * Reference\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#child}\n   */\n\n\n  child(path) {\n    return new Reference(this._database, `${this.path}/${path}`);\n  }\n  /**\n   * Return the ref as a path string\n   * @returns {string}\n   */\n\n\n  toString() {\n    return `${this._database.databaseUrl}${this.path}`;\n  }\n  /**\n   * Return a JSON-serializable representation of this object.\n   * @returns {string}\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Returns whether another Reference represent the same location and are from the\n   * same instance of firebase.app.App - multiple firebase apps not currently supported.\n   * @param {Reference} otherRef - Other reference to compare to this one\n   * @return {Boolean} Whether otherReference is equal to this one\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#isEqual}\n   */\n\n\n  isEqual(otherRef) {\n    return !!otherRef && otherRef.constructor === Reference && otherRef.key === this.key && this._query.queryIdentifier() === otherRef._query.queryIdentifier();\n  }\n  /**\n   * GETTERS\n   */\n\n  /**\n   * The parent location of a Reference, or null for the root Reference.\n   * @type {Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#parent}\n   */\n\n\n  get parent() {\n    if (this.path === '/') return null;\n    return new Reference(this._database, this.path.substring(0, this.path.lastIndexOf('/')));\n  }\n  /**\n   * A reference to itself\n   * @type {!Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#ref}\n   */\n\n\n  get ref() {\n    return this;\n  }\n  /**\n   * Reference to the root of the database: '/'\n   * @type {!Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#root}\n   */\n\n\n  get root() {\n    return new Reference(this._database, '/');\n  }\n  /**\n   * INTERNALS\n   */\n\n  /**\n   * Generate a unique registration key.\n   *\n   * @return {string}\n   */\n\n\n  _getRegistrationKey(eventType) {\n    return `$${this._database.databaseUrl}$/${this.path}$${this._query.queryIdentifier()}$${listeners}$${eventType}`;\n  }\n  /**\n   * Generate a string that uniquely identifies this\n   * combination of path and query modifiers\n   *\n   * @return {string}\n   * @private\n   */\n\n\n  _getRefKey() {\n    return `$${this._database.databaseUrl}$/${this.path}$${this._query.queryIdentifier()}`;\n  }\n  /**\n   *\n   * @param obj\n   * @returns {Object}\n   * @private\n   */\n\n\n  _serializeObject(obj) {\n    if (!isObject(obj)) return obj; // json stringify then parse it calls toString on Objects / Classes\n    // that support it i.e new Date() becomes a ISO string.\n\n    return tryJSONParse(tryJSONStringify(obj));\n  }\n  /**\n   *\n   * @param value\n   * @returns {*}\n   * @private\n   */\n\n\n  _serializeAnyType(value) {\n    if (isObject(value)) {\n      return {\n        type: 'object',\n        value: this._serializeObject(value)\n      };\n    }\n\n    return {\n      type: typeof value,\n      value\n    };\n  }\n  /**\n   * Register a listener for data changes at the current ref's location.\n   * The primary method of reading data from a Database.\n   *\n   * Listeners can be unbound using {@link off}.\n   *\n   * Event Types:\n   *\n   * - value: {@link callback}.\n   * - child_added: {@link callback}\n   * - child_removed: {@link callback}\n   * - child_changed: {@link callback}\n   * - child_moved: {@link callback}\n   *\n   * @param {ReferenceEventType} eventType - Type of event to attach a callback for.\n   * @param {ReferenceEventCallback} callback - Function that will be called\n   * when the event occurs with the new data.\n   * @param {cancelCallbackOrContext=} cancelCallbackOrContext - Optional callback that is called\n   * if the event subscription fails. {@link cancelCallbackOrContext}\n   * @param {*=} context - Optional object to bind the callbacks to when calling them.\n   * @returns {ReferenceEventCallback} callback function, unmodified (unbound), for\n   * convenience if you want to pass an inline function to on() and store it later for\n   * removing using off().\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#on}\n   */\n\n\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    if (!eventType) {\n      throw new Error('Query.on failed: Function called with 0 arguments. Expects at least 2.');\n    }\n\n    if (!isString(eventType) || !ReferenceEventTypes[eventType]) {\n      throw new Error(`Query.on failed: First argument must be a valid string event type: \"${Object.keys(ReferenceEventTypes).join(', ')}\"`);\n    }\n\n    if (!callback) {\n      throw new Error('Query.on failed: Function called with 1 argument. Expects at least 2.');\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error('Query.on failed: Second argument must be a valid function.');\n    }\n\n    if (cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) && !isObject(context) && !isObject(cancelCallbackOrContext)) {\n      throw new Error('Query.on failed: Function called with 3 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n    }\n\n    if (cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) && context) {\n      throw new Error('Query.on failed: Function called with 4 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n    }\n\n    const eventRegistrationKey = this._getRegistrationKey(eventType);\n\n    const registrationCancellationKey = `${eventRegistrationKey}$cancelled`;\n\n    const _context = cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) ? cancelCallbackOrContext : context;\n\n    const registrationObj = {\n      eventType,\n      ref: this,\n      path: this.path,\n      key: this._getRefKey(),\n      appName: this._database.app.name,\n      dbURL: this._database.databaseUrl,\n      eventRegistrationKey\n    };\n    SyncTree.addRegistration({ ...registrationObj,\n      listener: _context ? callback.bind(_context) : callback\n    });\n\n    if (cancelCallbackOrContext && isFunction(cancelCallbackOrContext)) {\n      // cancellations have their own separate registration\n      // as these are one off events, and they're not guaranteed\n      // to occur either, only happens on failure to register on native\n      SyncTree.addRegistration({\n        ref: this,\n        once: true,\n        path: this.path,\n        key: this._getRefKey(),\n        appName: this._database.app.name,\n        dbURL: this._database.databaseUrl,\n        eventType: `${eventType}$cancelled`,\n        eventRegistrationKey: registrationCancellationKey,\n        listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext\n      });\n    } // initialise the native listener if not already listening\n\n\n    getNativeModule(this._database).on({\n      eventType,\n      path: this.path,\n      key: this._getRefKey(),\n      appName: this._database.app.name,\n      modifiers: this._query.getModifiers(),\n      hasCancellationCallback: isFunction(cancelCallbackOrContext),\n      registration: {\n        eventRegistrationKey,\n        key: registrationObj.key,\n        registrationCancellationKey\n      }\n    }); // increment number of listeners - just a short way of making\n    // every registration unique per .on() call\n\n    listeners += 1; // return original unbound successCallback for\n    // the purposes of calling .off(eventType, callback) at a later date\n\n    return callback;\n  }\n  /**\n   * Detaches a callback previously attached with on().\n   *\n   * Detach a callback previously attached with on(). Note that if on() was called\n   * multiple times with the same eventType and callback, the callback will be called\n   * multiple times for each event, and off() must be called multiple times to\n   * remove the callback. Calling off() on a parent listener will not automatically\n   * remove listeners registered on child nodes, off() must also be called on any\n   * child listeners to remove the callback.\n   *\n   *  If a callback is not specified, all callbacks for the specified eventType will be removed.\n   * Similarly, if no eventType or callback is specified, all callbacks for the Reference will be removed.\n   * @param eventType\n   * @param originalCallback\n   */\n\n\n  off(eventType = '', originalCallback) {\n    if (!arguments.length) {\n      // Firebase Docs:\n      //     if no eventType or callback is specified, all callbacks for the Reference will be removed.\n      return SyncTree.removeListenersForRegistrations(SyncTree.getRegistrationsByPath(this.path));\n    }\n    /*\n     * VALIDATE ARGS\n     */\n\n\n    if (eventType && (!isString(eventType) || !ReferenceEventTypes[eventType])) {\n      throw new Error(`Query.off failed: First argument must be a valid string event type: \"${Object.keys(ReferenceEventTypes).join(', ')}\"`);\n    }\n\n    if (originalCallback && !isFunction(originalCallback)) {\n      throw new Error('Query.off failed: Function called with 2 arguments, but second optional argument was not a function.');\n    } // Firebase Docs:\n    //     Note that if on() was called\n    //     multiple times with the same eventType and callback, the callback will be called\n    //     multiple times for each event, and off() must be called multiple times to\n    //     remove the callback.\n    // Remove only a single registration\n\n\n    if (eventType && originalCallback) {\n      const registration = SyncTree.getOneByPathEventListener(this.path, eventType, originalCallback);\n      if (!registration) return []; // remove the paired cancellation registration if any exist\n\n      SyncTree.removeListenersForRegistrations([`${registration}$cancelled`]); // remove only the first registration to match firebase web sdk\n      // call multiple times to remove multiple registrations\n\n      return SyncTree.removeListenerRegistrations(originalCallback, [registration]);\n    } // Firebase Docs:\n    //     If a callback is not specified, all callbacks for the specified eventType will be removed.\n\n\n    const registrations = SyncTree.getRegistrationsByPathEvent(this.path, eventType);\n    SyncTree.removeListenersForRegistrations(SyncTree.getRegistrationsByPathEvent(this.path, `${eventType}$cancelled`));\n    return SyncTree.removeListenersForRegistrations(registrations);\n  }\n\n}"]},"metadata":{},"sourceType":"script"}