{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _Trace = _interopRequireDefault(require(\"./Trace\"));\n\nvar _HttpMetric = _interopRequireDefault(require(\"./HttpMetric\"));\n\nvar _ModuleBase2 = _interopRequireDefault(require(\"../../utils/ModuleBase\"));\n\nvar _native = require(\"../../utils/native\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MODULE_NAME = 'RNFirebasePerformance';\nexports.MODULE_NAME = MODULE_NAME;\nvar NAMESPACE = 'perf';\nexports.NAMESPACE = NAMESPACE;\nvar HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\n\nvar PerformanceMonitoring = function (_ModuleBase) {\n  (0, _inherits2.default)(PerformanceMonitoring, _ModuleBase);\n\n  var _super = _createSuper(PerformanceMonitoring);\n\n  function PerformanceMonitoring(app) {\n    (0, _classCallCheck2.default)(this, PerformanceMonitoring);\n    return _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  (0, _createClass2.default)(PerformanceMonitoring, [{\n    key: \"setPerformanceCollectionEnabled\",\n    value: function setPerformanceCollectionEnabled(enabled) {\n      if (typeof enabled !== 'boolean') {\n        throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n      }\n\n      return (0, _native.getNativeModule)(this).setPerformanceCollectionEnabled(enabled);\n    }\n  }, {\n    key: \"newTrace\",\n    value: function newTrace(trace) {\n      if (typeof trace !== 'string') {\n        throw new Error('firebase.perf().newTrace() requires a string value');\n      }\n\n      return new _Trace.default(this, trace);\n    }\n  }, {\n    key: \"newHttpMetric\",\n    value: function newHttpMetric(url, httpMethod) {\n      if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n        throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n      }\n\n      if (!HTTP_METHODS[httpMethod]) {\n        throw new Error(\"firebase.perf().newHttpMetric() httpMethod should be one of \" + Object.keys(HTTP_METHODS).join(', '));\n      }\n\n      return new _HttpMetric.default(this, url, httpMethod);\n    }\n  }]);\n  return PerformanceMonitoring;\n}(_ModuleBase2.default);\n\nexports.default = PerformanceMonitoring;\nvar statics = {};\nexports.statics = statics;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/perf/index.js"],"names":["MODULE_NAME","NAMESPACE","HTTP_METHODS","CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE","PerformanceMonitoring","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","enabled","Error","setPerformanceCollectionEnabled","trace","Trace","url","httpMethod","Object","keys","join","HttpMetric","ModuleBase","statics"],"mappings":";;;;;;;;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;;;;;AACO,IAAMA,WAAW,GAAG,uBAApB;;AACA,IAAMC,SAAS,GAAG,MAAlB;;AACP,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,GAAG,EAAE,IAHc;AAInBC,EAAAA,IAAI,EAAE,IAJa;AAKnBC,EAAAA,OAAO,EAAE,IALU;AAMnBC,EAAAA,KAAK,EAAE,IANY;AAOnBC,EAAAA,IAAI,EAAE,IAPa;AAQnBC,EAAAA,GAAG,EAAE,IARc;AASnBC,EAAAA,KAAK,EAAE;AATY,CAArB;;IAWqBC,qB;;;;;AACnB,iCAAYC,GAAZ,EAAiB;AAAA;AAAA,6BACTA,GADS,EACJ;AACTC,MAAAA,UAAU,EAAEd,WADH;AAETe,MAAAA,kBAAkB,EAAE,KAFX;AAGTC,MAAAA,mBAAmB,EAAE,KAHZ;AAITC,MAAAA,SAAS,EAAEhB;AAJF,KADI;AAOhB;;;;WAQD,yCAAgCiB,OAAhC,EAAyC;AACvC,UAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChC,cAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAED,aAAO,6BAAgB,IAAhB,EAAsBC,+BAAtB,CAAsDF,OAAtD,CAAP;AACD;;;WAOD,kBAASG,KAAT,EAAgB;AACd,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,IAAIF,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,aAAO,IAAIG,cAAJ,CAAU,IAAV,EAAgBD,KAAhB,CAAP;AACD;;;WASD,uBAAcE,GAAd,EAAmBC,UAAnB,EAA+B;AAC7B,UAAI,OAAOD,GAAP,KAAe,QAAf,IAA2B,OAAOC,UAAP,KAAsB,QAArD,EAA+D;AAC7D,cAAM,IAAIL,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,UAAI,CAACjB,YAAY,CAACsB,UAAD,CAAjB,EAA+B;AAC7B,cAAM,IAAIL,KAAJ,kEAAyEM,MAAM,CAACC,IAAP,CAAYxB,YAAZ,EAA0ByB,IAA1B,CAA+B,IAA/B,CAAzE,CAAN;AACD;;AAED,aAAO,IAAIC,mBAAJ,CAAe,IAAf,EAAqBL,GAArB,EAA0BC,UAA1B,CAAP;AACD;;;EAtDgDK,oB;;;AAyD5C,IAAMC,OAAO,GAAG,EAAhB","sourcesContent":["/**\n * \n * Performance monitoring representation wrapper\n */\nimport Trace from './Trace';\nimport HttpMetric from './HttpMetric';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebasePerformance';\nexport const NAMESPACE = 'perf';\nconst HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nexport default class PerformanceMonitoring extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Globally enable or disable performance monitoring\n   * @param enabled\n   * @returns {*}\n   */\n\n\n  setPerformanceCollectionEnabled(enabled) {\n    if (typeof enabled !== 'boolean') {\n      throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n    }\n\n    return getNativeModule(this).setPerformanceCollectionEnabled(enabled);\n  }\n  /**\n   * Returns a new trace instance\n   * @param trace\n   */\n\n\n  newTrace(trace) {\n    if (typeof trace !== 'string') {\n      throw new Error('firebase.perf().newTrace() requires a string value');\n    }\n\n    return new Trace(this, trace);\n  }\n  /**\n   * Return a new HttpMetric instance\n   * @param url\n   * @param httpMethod\n   * @returns {HttpMetric}\n   */\n\n\n  newHttpMetric(url, httpMethod) {\n    if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n      throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n    }\n\n    if (!HTTP_METHODS[httpMethod]) {\n      throw new Error(`firebase.perf().newHttpMetric() httpMethod should be one of ${Object.keys(HTTP_METHODS).join(', ')}`);\n    }\n\n    return new HttpMetric(this, url, httpMethod);\n  }\n\n}\nexport const statics = {};"]},"metadata":{},"sourceType":"script"}