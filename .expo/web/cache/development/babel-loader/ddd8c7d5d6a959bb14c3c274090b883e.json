{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _log = require(\"./log\");\n\nvar _native = require(\"./native\");\n\nvar ModuleBase = function () {\n  function ModuleBase(app, config, customUrlOrRegion) {\n    (0, _classCallCheck2.default)(this, ModuleBase);\n\n    if (!config.moduleName) {\n      throw new Error('Missing module name');\n    }\n\n    if (!config.namespace) {\n      throw new Error('Missing namespace');\n    }\n\n    var moduleName = config.moduleName;\n    this._app = app;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this.namespace = config.namespace;\n    (0, _native.initialiseNativeModule)(this, config, customUrlOrRegion);\n    (0, _log.initialiseLogger)(this, app.name + \":\" + moduleName.replace('RNFirebase', ''));\n  }\n\n  (0, _createClass2.default)(ModuleBase, [{\n    key: \"app\",\n    get: function get() {\n      return this._app;\n    }\n  }, {\n    key: \"log\",\n    get: function get() {\n      return (0, _log.getLogger)(this);\n    }\n  }]);\n  return ModuleBase;\n}();\n\nexports.default = ModuleBase;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/utils/ModuleBase.js"],"names":["ModuleBase","app","config","customUrlOrRegion","moduleName","Error","namespace","_app","_customUrlOrRegion","name","replace"],"mappings":";;;;;;;;;;;AAAA;;AACA;;IACqBA,U;AAOnB,sBAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,iBAAzB,EAA4C;AAAA;;AAC1C,QAAI,CAACD,MAAM,CAACE,UAAZ,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,QAAI,CAACH,MAAM,CAACI,SAAZ,EAAuB;AACrB,YAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAPyC,QAUxCD,UAVwC,GAWtCF,MAXsC,CAUxCE,UAVwC;AAY1C,SAAKG,IAAL,GAAYN,GAAZ;AACA,SAAKO,kBAAL,GAA0BL,iBAA1B;AACA,SAAKG,SAAL,GAAiBJ,MAAM,CAACI,SAAxB;AAEA,wCAAuB,IAAvB,EAA6BJ,MAA7B,EAAqCC,iBAArC;AACA,+BAAiB,IAAjB,EAA0BF,GAAG,CAACQ,IAA9B,SAAsCL,UAAU,CAACM,OAAX,CAAmB,YAAnB,EAAiC,EAAjC,CAAtC;AACD;;;;SAOD,eAAU;AACR,aAAO,KAAKH,IAAZ;AACD;;;SAED,eAAU;AACR,aAAO,oBAAU,IAAV,CAAP;AACD","sourcesContent":["import { initialiseLogger, getLogger } from './log';\nimport { initialiseNativeModule } from './native';\nexport default class ModuleBase {\n  /**\n   *\n   * @param app\n   * @param config\n   * @param customUrlOrRegion\n   */\n  constructor(app, config, customUrlOrRegion) {\n    if (!config.moduleName) {\n      throw new Error('Missing module name');\n    }\n\n    if (!config.namespace) {\n      throw new Error('Missing namespace');\n    }\n\n    const {\n      moduleName\n    } = config;\n    this._app = app;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this.namespace = config.namespace; // check if native module exists as all native\n\n    initialiseNativeModule(this, config, customUrlOrRegion);\n    initialiseLogger(this, `${app.name}:${moduleName.replace('RNFirebase', '')}`);\n  }\n  /**\n   * Returns the App instance for current module\n   * @return {*}\n   */\n\n\n  get app() {\n    return this._app;\n  }\n\n  get log() {\n    return getLogger(this);\n  }\n\n}"]},"metadata":{},"sourceType":"script"}