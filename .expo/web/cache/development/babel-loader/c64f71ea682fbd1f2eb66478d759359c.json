{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeFirebase = _interopRequireDefault(require(\"react-native-firebase\"));\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _AppNavigation = _interopRequireDefault(require(\"./src/screens/AppNavigation\"));\n\nvar _jsxFileName = \"/Users/alheresh/trend-mobile/my-trend-new/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar App = function (_Component) {\n  (0, _inherits2.default)(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.getToken = function _callee() {\n      var fcmToken;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(_asyncStorage.default.getItem('fcmToken'));\n\n            case 2:\n              fcmToken = _context.sent;\n              console.log('fcmToken', fcmToken);\n\n              if (fcmToken) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return _regenerator.default.awrap(_reactNativeFirebase.default.messaging().getToken());\n\n            case 7:\n              fcmToken = _context.sent;\n\n              if (!fcmToken) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 11;\n              return _regenerator.default.awrap(_asyncStorage.default.setItem('fcmToken', fcmToken));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.checkPermission = function _callee2() {\n      var enabled;\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(_reactNativeFirebase.default.messaging().hasPermission());\n\n            case 2:\n              enabled = _context2.sent;\n\n              if (enabled) {\n                _this.getToken();\n              } else {\n                _this.requestPermission();\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.requestPermission = function _callee3() {\n      return _regenerator.default.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regenerator.default.awrap(_reactNativeFirebase.default.messaging().requestPermission());\n\n            case 3:\n              _this.getToken();\n\n              _context3.next = 9;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log('permission rejected');\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    _this.createNotificationListeners = function () {\n      _this.onUnsubscribeNotificaitonListener = _reactNativeFirebase.default.notifications().onNotification(function (notification) {\n        console.log('notification', notification);\n        notification.android.setChannelId('test-channel');\n\n        _reactNativeFirebase.default.notifications().displayNotification(notification);\n      });\n    };\n\n    _this.removeNotificationListeners = function () {\n      _this.onUnsubscribeNotificaitonListener();\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var channel = new _reactNativeFirebase.default.notifications.Android.Channel('test-channel', 'Test Channel', _reactNativeFirebase.default.notifications.Android.Importance.Max).setDescription('My apps test channel');\n\n      _reactNativeFirebase.default.notifications().android.createChannel(channel);\n\n      this.checkPermission();\n      this.createNotificationListeners();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeNotificationListeners();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_AppNavigation.default, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n  return App;\n}(_react.Component);\n\nexports.default = App;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/App.js"],"names":["App","getToken","AsyncStorage","getItem","fcmToken","console","log","firebase","messaging","setItem","checkPermission","hasPermission","enabled","requestPermission","createNotificationListeners","onUnsubscribeNotificaitonListener","notifications","onNotification","notification","android","setChannelId","displayNotification","removeNotificationListeners","channel","Android","Channel","Importance","Max","setDescription","createChannel","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;IAEqBA,G;;;;;;;;;;;;;;;;UACnBC,Q,GAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACYC,sBAAaC,OAAb,CAAqB,UAArB,CADZ;;AAAA;AACLC,cAAAA,QADK;AAETC,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;;AAFS,kBAGJA,QAHI;AAAA;AAAA;AAAA;;AAAA;AAAA,gDAIUG,6BAASC,SAAT,GAAqBP,QAArB,EAJV;;AAAA;AAIPG,cAAAA,QAJO;;AAAA,mBAKHA,QALG;AAAA;AAAA;AAAA;;AAAA;AAAA,gDAMCF,sBAAaO,OAAb,CAAqB,UAArB,EAAiCL,QAAjC,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAWXM,e,GAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACMH,6BAASC,SAAT,GAAqBG,aAArB,EADN;;AAAA;AACVC,cAAAA,OADU;;AAEhB,kBAAIA,OAAJ,EAAa;AACX,sBAAKX,QAAL;AACD,eAFD,MAEO;AACL,sBAAKY,iBAAL;AACD;;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UASlBA,iB,GAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAEVN,6BAASC,SAAT,GAAqBK,iBAArB,EAFU;;AAAA;AAGhB,oBAAKZ,QAAL;;AAHgB;AAAA;;AAAA;AAAA;AAAA;AAKhBI,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AALgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UASpBQ,2B,GAA8B,YAAM;AAClC,YAAKC,iCAAL,GAAyCR,6BACtCS,aADsC,GAEtCC,cAFsC,CAEvB,UAACC,YAAD,EAAkB;AAChCb,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BY,YAA5B;AACAA,QAAAA,YAAY,CAACC,OAAb,CAAqBC,YAArB,CAAkC,cAAlC;;AACAb,qCAASS,aAAT,GAAyBK,mBAAzB,CAA6CH,YAA7C;AACD,OANsC,CAAzC;AAOD,K;;UAEDI,2B,GAA8B,YAAM;AAClC,YAAKP,iCAAL;AACD,K;;;;;;;WAED,6BAAoB;AAElB,UAAMQ,OAAO,GAAG,IAAIhB,6BAASS,aAAT,CAAuBQ,OAAvB,CAA+BC,OAAnC,CACd,cADc,EAEd,cAFc,EAGdlB,6BAASS,aAAT,CAAuBQ,OAAvB,CAA+BE,UAA/B,CAA0CC,GAH5B,EAIdC,cAJc,CAIC,sBAJD,CAAhB;;AAOArB,mCAASS,aAAT,GAAyBG,OAAzB,CAAiCU,aAAjC,CAA+CN,OAA/C;;AACA,WAAKb,eAAL;AACA,WAAKI,2BAAL;AACD;;;WAED,gCAAuB;AACrB,WAAKQ,2BAAL;AACD;;;WAED,kBAAS;AACP,aAAO,6BAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;EAhE8BQ,gB","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport firebase from 'react-native-firebase';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport AppNavigation from './src/screens/AppNavigation';\n\nexport default class App extends Component {\n  getToken = async () => {\n    let fcmToken = await AsyncStorage.getItem('fcmToken');\n    console.log('fcmToken', fcmToken);\n    if (!fcmToken) {\n      fcmToken = await firebase.messaging().getToken();\n      if (fcmToken) {\n        await AsyncStorage.setItem('fcmToken', fcmToken);\n      }\n    }\n  };\n\n  checkPermission = async () => {\n    const enabled = await firebase.messaging().hasPermission();\n    if (enabled) {\n      this.getToken();\n    } else {\n      this.requestPermission();\n    }\n  };\n\n  requestPermission = async () => {\n    try {\n      await firebase.messaging().requestPermission();\n      this.getToken();\n    } catch (error) {\n      console.log('permission rejected');\n    }\n  };\n\n  createNotificationListeners = () => {\n    this.onUnsubscribeNotificaitonListener = firebase\n      .notifications()\n      .onNotification((notification) => {\n        console.log('notification', notification);\n        notification.android.setChannelId('test-channel');\n        firebase.notifications().displayNotification(notification);\n      });\n  };\n\n  removeNotificationListeners = () => {\n    this.onUnsubscribeNotificaitonListener();\n  };\n\n  componentDidMount() {\n    // Build a channel\n    const channel = new firebase.notifications.Android.Channel(\n      'test-channel',\n      'Test Channel',\n      firebase.notifications.Android.Importance.Max,\n    ).setDescription('My apps test channel');\n\n    // Create the channel\n    firebase.notifications().android.createChannel(channel);\n    this.checkPermission();\n    this.createNotificationListeners();\n  }\n\n  componentWillUnmount() {\n    this.removeNotificationListeners();\n  }\n\n  render() {\n    return <AppNavigation />;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}