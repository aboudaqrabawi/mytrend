{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _events = require(\"../../utils/events\");\n\nvar _log = require(\"../../utils/log\");\n\nvar _native = require(\"../../utils/native\");\n\nvar transactionId = 0;\n\nvar generateTransactionId = function generateTransactionId() {\n  return transactionId++;\n};\n\nvar TransactionHandler = function () {\n  function TransactionHandler(database) {\n    (0, _classCallCheck2.default)(this, TransactionHandler);\n    this._transactions = {};\n    this._database = database;\n\n    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n\n  (0, _createClass2.default)(TransactionHandler, [{\n    key: \"add\",\n    value: function add(reference, transactionUpdater, onComplete) {\n      var applyLocally = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var id = generateTransactionId();\n      this._transactions[id] = {\n        id: id,\n        reference: reference,\n        transactionUpdater: transactionUpdater,\n        onComplete: onComplete,\n        applyLocally: applyLocally,\n        completed: false,\n        started: true\n      };\n      (0, _native.getNativeModule)(this._database).transactionStart(reference.path, id, applyLocally);\n    }\n  }, {\n    key: \"_handleTransactionEvent\",\n    value: function _handleTransactionEvent() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      switch (event.type) {\n        case 'update':\n          return this._handleUpdate(event);\n\n        case 'error':\n          return this._handleError(event);\n\n        case 'complete':\n          return this._handleComplete(event);\n\n        default:\n          (0, _log.getLogger)(this._database).warn(\"Unknown transaction event type: '\" + event.type + \"'\", event);\n          return undefined;\n      }\n    }\n  }, {\n    key: \"_handleUpdate\",\n    value: function _handleUpdate() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var newValue;\n      var id = event.id,\n          value = event.value;\n\n      try {\n        var transaction = this._transactions[id];\n        if (!transaction) return;\n        newValue = transaction.transactionUpdater(value);\n      } finally {\n        var abort = false;\n\n        if (newValue === undefined) {\n          abort = true;\n        }\n\n        (0, _native.getNativeModule)(this._database).transactionTryCommit(id, {\n          value: newValue,\n          abort: abort\n        });\n      }\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError() {\n      var _this = this;\n\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var transaction = this._transactions[event.id];\n\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n\n        try {\n          transaction.onComplete(event.error, false, null);\n        } finally {\n          setImmediate(function () {\n            delete _this._transactions[event.id];\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_handleComplete\",\n    value: function _handleComplete() {\n      var _this2 = this;\n\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var transaction = this._transactions[event.id];\n\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n\n        try {\n          transaction.onComplete(null, event.committed, (0, _extends2.default)({}, event.snapshot));\n        } finally {\n          setImmediate(function () {\n            delete _this2._transactions[event.id];\n          });\n        }\n      }\n    }\n  }]);\n  return TransactionHandler;\n}();\n\nexports.default = TransactionHandler;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/database/transaction.js"],"names":["transactionId","generateTransactionId","TransactionHandler","database","_transactions","_database","SharedEventEmitter","addListener","_handleTransactionEvent","bind","reference","transactionUpdater","onComplete","applyLocally","id","completed","started","transactionStart","path","event","type","_handleUpdate","_handleError","_handleComplete","warn","undefined","newValue","value","transaction","abort","transactionTryCommit","error","setImmediate","committed","snapshot"],"mappings":";;;;;;;;;;;;;AAIA;;AACA;;AACA;;AACA,IAAIA,aAAa,GAAG,CAApB;;AAOA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAMD,aAAa,EAAnB;AAAA,CAA9B;;IAMqBE,kB;AACnB,8BAAYC,QAAZ,EAAsB;AAAA;AACpB,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,SAAL,GAAiBF,QAAjB;;AACAG,+BAAmBC,WAAnB,CAA+B,6BAAgB,KAAKF,SAArB,EAAgC,4BAAhC,CAA/B,EAA8F,KAAKG,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA9F;AACD;;;;WAUD,aAAIC,SAAJ,EAAeC,kBAAf,EAAmCC,UAAnC,EAAqE;AAAA,UAAtBC,YAAsB,uEAAP,KAAO;AACnE,UAAMC,EAAE,GAAGb,qBAAqB,EAAhC;AACA,WAAKG,aAAL,CAAmBU,EAAnB,IAAyB;AACvBA,QAAAA,EAAE,EAAFA,EADuB;AAEvBJ,QAAAA,SAAS,EAATA,SAFuB;AAGvBC,QAAAA,kBAAkB,EAAlBA,kBAHuB;AAIvBC,QAAAA,UAAU,EAAVA,UAJuB;AAKvBC,QAAAA,YAAY,EAAZA,YALuB;AAMvBE,QAAAA,SAAS,EAAE,KANY;AAOvBC,QAAAA,OAAO,EAAE;AAPc,OAAzB;AASA,mCAAgB,KAAKX,SAArB,EAAgCY,gBAAhC,CAAiDP,SAAS,CAACQ,IAA3D,EAAiEJ,EAAjE,EAAqED,YAArE;AACD;;;WAaD,mCAAoC;AAAA,UAAZM,KAAY,uEAAJ,EAAI;;AAClC,cAAQA,KAAK,CAACC,IAAd;AACE,aAAK,QAAL;AACE,iBAAO,KAAKC,aAAL,CAAmBF,KAAnB,CAAP;;AAEF,aAAK,OAAL;AACE,iBAAO,KAAKG,YAAL,CAAkBH,KAAlB,CAAP;;AAEF,aAAK,UAAL;AACE,iBAAO,KAAKI,eAAL,CAAqBJ,KAArB,CAAP;;AAEF;AACE,8BAAU,KAAKd,SAAf,EAA0BmB,IAA1B,uCAAmEL,KAAK,CAACC,IAAzE,QAAkFD,KAAlF;AACA,iBAAOM,SAAP;AAZJ;AAcD;;;WAQD,yBAA0B;AAAA,UAAZN,KAAY,uEAAJ,EAAI;AACxB,UAAIO,QAAJ;AADwB,UAGtBZ,EAHsB,GAKpBK,KALoB,CAGtBL,EAHsB;AAAA,UAItBa,KAJsB,GAKpBR,KALoB,CAItBQ,KAJsB;;AAOxB,UAAI;AACF,YAAMC,WAAW,GAAG,KAAKxB,aAAL,CAAmBU,EAAnB,CAApB;AACA,YAAI,CAACc,WAAL,EAAkB;AAClBF,QAAAA,QAAQ,GAAGE,WAAW,CAACjB,kBAAZ,CAA+BgB,KAA/B,CAAX;AACD,OAJD,SAIU;AACR,YAAIE,KAAK,GAAG,KAAZ;;AAEA,YAAIH,QAAQ,KAAKD,SAAjB,EAA4B;AAC1BI,UAAAA,KAAK,GAAG,IAAR;AACD;;AAED,qCAAgB,KAAKxB,SAArB,EAAgCyB,oBAAhC,CAAqDhB,EAArD,EAAyD;AACvDa,UAAAA,KAAK,EAAED,QADgD;AAEvDG,UAAAA,KAAK,EAALA;AAFuD,SAAzD;AAID;AACF;;;WAQD,wBAAyB;AAAA;;AAAA,UAAZV,KAAY,uEAAJ,EAAI;AACvB,UAAMS,WAAW,GAAG,KAAKxB,aAAL,CAAmBe,KAAK,CAACL,EAAzB,CAApB;;AAEA,UAAIc,WAAW,IAAI,CAACA,WAAW,CAACb,SAAhC,EAA2C;AACzCa,QAAAA,WAAW,CAACb,SAAZ,GAAwB,IAAxB;;AAEA,YAAI;AACFa,UAAAA,WAAW,CAAChB,UAAZ,CAAuBO,KAAK,CAACY,KAA7B,EAAoC,KAApC,EAA2C,IAA3C;AACD,SAFD,SAEU;AACRC,UAAAA,YAAY,CAAC,YAAM;AACjB,mBAAO,KAAI,CAAC5B,aAAL,CAAmBe,KAAK,CAACL,EAAzB,CAAP;AACD,WAFW,CAAZ;AAGD;AACF;AACF;;;WAQD,2BAA4B;AAAA;;AAAA,UAAZK,KAAY,uEAAJ,EAAI;AAC1B,UAAMS,WAAW,GAAG,KAAKxB,aAAL,CAAmBe,KAAK,CAACL,EAAzB,CAApB;;AAEA,UAAIc,WAAW,IAAI,CAACA,WAAW,CAACb,SAAhC,EAA2C;AACzCa,QAAAA,WAAW,CAACb,SAAZ,GAAwB,IAAxB;;AAEA,YAAI;AACFa,UAAAA,WAAW,CAAChB,UAAZ,CAAuB,IAAvB,EAA6BO,KAAK,CAACc,SAAnC,EAA8C,uBAAc,EAAd,EAAkBd,KAAK,CAACe,QAAxB,CAA9C;AACD,SAFD,SAEU;AACRF,UAAAA,YAAY,CAAC,YAAM;AACjB,mBAAO,MAAI,CAAC5B,aAAL,CAAmBe,KAAK,CAACL,EAAzB,CAAP;AACD,WAFW,CAAZ;AAGD;AACF;AACF","sourcesContent":["/**\n * \n * Database Transaction representation wrapper\n */\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nlet transactionId = 0;\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\n\nconst generateTransactionId = () => transactionId++;\n/**\n * @class TransactionHandler\n */\n\n\nexport default class TransactionHandler {\n  constructor(database) {\n    this._transactions = {};\n    this._database = database;\n    SharedEventEmitter.addListener(getAppEventName(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  /**\n   * Add a new transaction and start it natively.\n   * @param reference\n   * @param transactionUpdater\n   * @param onComplete\n   * @param applyLocally\n   */\n\n\n  add(reference, transactionUpdater, onComplete, applyLocally = false) {\n    const id = generateTransactionId();\n    this._transactions[id] = {\n      id,\n      reference,\n      transactionUpdater,\n      onComplete,\n      applyLocally,\n      completed: false,\n      started: true\n    };\n    getNativeModule(this._database).transactionStart(reference.path, id, applyLocally);\n  }\n  /**\n   *  INTERNALS\n   */\n\n  /**\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n\n\n  _handleTransactionEvent(event = {}) {\n    switch (event.type) {\n      case 'update':\n        return this._handleUpdate(event);\n\n      case 'error':\n        return this._handleError(event);\n\n      case 'complete':\n        return this._handleComplete(event);\n\n      default:\n        getLogger(this._database).warn(`Unknown transaction event type: '${event.type}'`, event);\n        return undefined;\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleUpdate(event = {}) {\n    let newValue;\n    const {\n      id,\n      value\n    } = event;\n\n    try {\n      const transaction = this._transactions[id];\n      if (!transaction) return;\n      newValue = transaction.transactionUpdater(value);\n    } finally {\n      let abort = false;\n\n      if (newValue === undefined) {\n        abort = true;\n      }\n\n      getNativeModule(this._database).transactionTryCommit(id, {\n        value: newValue,\n        abort\n      });\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleError(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(event.error, false, null);\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleComplete(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(null, event.committed, Object.assign({}, event.snapshot));\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"script"}