{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AndroidChannel = _interopRequireDefault(require(\"./AndroidChannel\"));\n\nvar _AndroidChannelGroup = _interopRequireDefault(require(\"./AndroidChannelGroup\"));\n\nvar _native = require(\"../../utils/native\");\n\nvar AndroidNotifications = function () {\n  function AndroidNotifications(notifications) {\n    (0, _classCallCheck2.default)(this, AndroidNotifications);\n    this._notifications = notifications;\n  }\n\n  (0, _createClass2.default)(AndroidNotifications, [{\n    key: \"createChannel\",\n    value: function createChannel(channel) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (!(channel instanceof _AndroidChannel.default)) {\n          throw new Error(\"AndroidNotifications:createChannel expects an 'AndroidChannel' but got type \" + typeof channel);\n        }\n\n        return (0, _native.getNativeModule)(this._notifications).createChannel(channel.build());\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroup\",\n    value: function createChannelGroup(channelGroup) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (!(channelGroup instanceof _AndroidChannelGroup.default)) {\n          throw new Error(\"AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type \" + typeof channelGroup);\n        }\n\n        return (0, _native.getNativeModule)(this._notifications).createChannelGroup(channelGroup.build());\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroups\",\n    value: function createChannelGroups(channelGroups) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (!Array.isArray(channelGroups)) {\n          throw new Error(\"AndroidNotifications:createChannelGroups expects an 'Array' but got type \" + typeof channelGroups);\n        }\n\n        var nativeChannelGroups = [];\n\n        for (var i = 0; i < channelGroups.length; i++) {\n          var channelGroup = channelGroups[i];\n\n          if (!(channelGroup instanceof _AndroidChannelGroup.default)) {\n            throw new Error(\"AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type \" + typeof channelGroup);\n          }\n\n          nativeChannelGroups.push(channelGroup.build());\n        }\n\n        return (0, _native.getNativeModule)(this._notifications).createChannelGroups(nativeChannelGroups);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannels\",\n    value: function createChannels(channels) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (!Array.isArray(channels)) {\n          throw new Error(\"AndroidNotifications:createChannels expects an 'Array' but got type \" + typeof channels);\n        }\n\n        var nativeChannels = [];\n\n        for (var i = 0; i < channels.length; i++) {\n          var channel = channels[i];\n\n          if (!(channel instanceof _AndroidChannel.default)) {\n            throw new Error(\"AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type \" + typeof channel);\n          }\n\n          nativeChannels.push(channel.build());\n        }\n\n        return (0, _native.getNativeModule)(this._notifications).createChannels(nativeChannels);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"removeDeliveredNotificationsByTag\",\n    value: function removeDeliveredNotificationsByTag(tag) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (typeof tag !== 'string') {\n          throw new Error(\"AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type \" + typeof tag);\n        }\n\n        return (0, _native.getNativeModule)(this._notifications).removeDeliveredNotificationsByTag(tag);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannelGroup\",\n    value: function deleteChannelGroup(groupId) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (typeof groupId !== 'string') {\n          throw new Error(\"AndroidNotifications:deleteChannelGroup expects an 'string' but got type \" + typeof groupId);\n        }\n\n        return (0, _native.getNativeModule)(this._notifications).deleteChannelGroup(groupId);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannel\",\n    value: function deleteChannel(channelId) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(\"AndroidNotifications:deleteChannel expects an 'string' but got type \" + typeof channelId);\n        }\n\n        return (0, _native.getNativeModule)(this._notifications).deleteChannel(channelId);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"getChannel\",\n    value: function getChannel(channelId) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(\"AndroidNotifications:getChannel expects an 'string' but got type \" + typeof channelId);\n        }\n\n        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannel(channelId));\n      }\n\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      if (_reactNative.Platform.OS === 'android') {\n        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannels());\n      }\n\n      return Promise.resolve([]);\n    }\n  }, {\n    key: \"getChannelGroup\",\n    value: function getChannelGroup(channelGroupId) {\n      if (_reactNative.Platform.OS === 'android') {\n        if (typeof channelGroupId !== 'string') {\n          throw new Error(\"AndroidNotifications:getChannel expects an 'string' but got type \" + typeof channelGroupId);\n        }\n\n        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannelGroup(channelGroupId));\n      }\n\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannelGroups\",\n    value: function getChannelGroups() {\n      if (_reactNative.Platform.OS === 'android') {\n        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannelGroups());\n      }\n\n      return Promise.resolve([]);\n    }\n  }]);\n  return AndroidNotifications;\n}();\n\nexports.default = AndroidNotifications;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/modules/notifications/AndroidNotifications.js"],"names":["AndroidNotifications","notifications","_notifications","channel","Platform","OS","AndroidChannel","Error","createChannel","build","Promise","resolve","channelGroup","AndroidChannelGroup","createChannelGroup","channelGroups","Array","isArray","nativeChannelGroups","i","length","push","createChannelGroups","channels","nativeChannels","createChannels","tag","removeDeliveredNotificationsByTag","groupId","deleteChannelGroup","channelId","deleteChannel","getChannel","getChannels","channelGroupId","getChannelGroup","getChannelGroups"],"mappings":"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","sourcesContent":["/**\n * \n * AndroidNotifications representation wrapper\n */\nimport { Platform } from 'react-native';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport { getNativeModule } from '../../utils/native';\nexport default class AndroidNotifications {\n  constructor(notifications) {\n    this._notifications = notifications;\n  }\n\n  createChannel(channel) {\n    if (Platform.OS === 'android') {\n      if (!(channel instanceof AndroidChannel)) {\n        throw new Error(`AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`);\n      }\n\n      return getNativeModule(this._notifications).createChannel(channel.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroup(channelGroup) {\n    if (Platform.OS === 'android') {\n      if (!(channelGroup instanceof AndroidChannelGroup)) {\n        throw new Error(`AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n      }\n\n      return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroups(channelGroups) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channelGroups)) {\n        throw new Error(`AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`);\n      }\n\n      const nativeChannelGroups = [];\n\n      for (let i = 0; i < channelGroups.length; i++) {\n        const channelGroup = channelGroups[i];\n\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(`AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n        }\n\n        nativeChannelGroups.push(channelGroup.build());\n      }\n\n      return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannels(channels) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channels)) {\n        throw new Error(`AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`);\n      }\n\n      const nativeChannels = [];\n\n      for (let i = 0; i < channels.length; i++) {\n        const channel = channels[i];\n\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(`AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`);\n        }\n\n        nativeChannels.push(channel.build());\n      }\n\n      return getNativeModule(this._notifications).createChannels(nativeChannels);\n    }\n\n    return Promise.resolve();\n  }\n\n  removeDeliveredNotificationsByTag(tag) {\n    if (Platform.OS === 'android') {\n      if (typeof tag !== 'string') {\n        throw new Error(`AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`);\n      }\n\n      return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannelGroup(groupId) {\n    if (Platform.OS === 'android') {\n      if (typeof groupId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannel(channelId);\n    }\n\n    return Promise.resolve();\n  }\n\n  getChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannels() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannels());\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getChannelGroup(channelGroupId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelGroupId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelGroupId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannelGroups() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n    }\n\n    return Promise.resolve([]);\n  }\n\n}"]},"metadata":{},"sourceType":"script"}