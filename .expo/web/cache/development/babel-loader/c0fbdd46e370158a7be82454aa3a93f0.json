{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialiseNativeModuleEventEmitter = exports.getAppEventName = exports.SharedEventEmitter = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _EventEmitter = _interopRequireDefault(require(\"react-native/Libraries/vendor/emitter/EventEmitter\"));\n\nvar NATIVE_EMITTERS = {};\nvar NATIVE_SUBSCRIPTIONS = {};\nvar SharedEventEmitter = new _EventEmitter.default();\nexports.SharedEventEmitter = SharedEventEmitter;\n\nvar getAppEventName = function getAppEventName(module, eventName) {\n  return module.app.name + \"-\" + eventName;\n};\n\nexports.getAppEventName = getAppEventName;\n\nvar getNativeEmitter = function getNativeEmitter(moduleName, module) {\n  var name = module.app.name + \"-\" + moduleName;\n  var nativeModule = _reactNative.NativeModules[moduleName];\n\n  if (!NATIVE_EMITTERS[name]) {\n    NATIVE_EMITTERS[name] = new _reactNative.NativeEventEmitter(nativeModule);\n  }\n\n  return NATIVE_EMITTERS[name];\n};\n\nvar subscribeToNativeModuleEvents = function subscribeToNativeModuleEvents(moduleName, module, eventName) {\n  if (!NATIVE_SUBSCRIPTIONS[eventName]) {\n    var nativeEmitter = getNativeEmitter(moduleName, module);\n    nativeEmitter.addListener(eventName, function (event) {\n      if (event.appName) {\n        SharedEventEmitter.emit(event.appName + \"-\" + eventName, event);\n      } else {\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_SUBSCRIPTIONS[eventName] = true;\n  }\n};\n\nvar initialiseNativeModuleEventEmitter = function initialiseNativeModuleEventEmitter(module, config) {\n  var events = config.events,\n      moduleName = config.moduleName;\n\n  if (events && events.length) {\n    for (var i = 0, len = events.length; i < len; i++) {\n      subscribeToNativeModuleEvents(moduleName, module, events[i]);\n    }\n  }\n};\n\nexports.initialiseNativeModuleEventEmitter = initialiseNativeModuleEventEmitter;","map":{"version":3,"sources":["/Users/alheresh/trend-mobile/my-trend-new/node_modules/react-native-firebase/dist/utils/events.js"],"names":["NATIVE_EMITTERS","NATIVE_SUBSCRIPTIONS","SharedEventEmitter","EventEmitter","getAppEventName","module","eventName","app","name","getNativeEmitter","moduleName","nativeModule","NativeModules","NativeEventEmitter","subscribeToNativeModuleEvents","nativeEmitter","addListener","event","appName","emit","initialiseNativeModuleEventEmitter","config","events","length","i","len"],"mappings":";;;;;;;AAAA;;AACA;;AACA,IAAMA,eAAe,GAAG,EAAxB;AACA,IAAMC,oBAAoB,GAAG,EAA7B;AACO,IAAMC,kBAAkB,GAAG,IAAIC,qBAAJ,EAA3B;;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASC,SAAT;AAAA,SAA0BD,MAAM,CAACE,GAAP,CAAWC,IAArC,SAA6CF,SAA7C;AAAA,CAAxB;;;;AAEP,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAaL,MAAb,EAAwB;AAC/C,MAAMG,IAAI,GAAMH,MAAM,CAACE,GAAP,CAAWC,IAAjB,SAAyBE,UAAnC;AACA,MAAMC,YAAY,GAAGC,2BAAcF,UAAd,CAArB;;AAEA,MAAI,CAACV,eAAe,CAACQ,IAAD,CAApB,EAA4B;AAC1BR,IAAAA,eAAe,CAACQ,IAAD,CAAf,GAAwB,IAAIK,+BAAJ,CAAuBF,YAAvB,CAAxB;AACD;;AAED,SAAOX,eAAe,CAACQ,IAAD,CAAtB;AACD,CATD;;AAuBA,IAAMM,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACJ,UAAD,EAAaL,MAAb,EAAqBC,SAArB,EAAmC;AACvE,MAAI,CAACL,oBAAoB,CAACK,SAAD,CAAzB,EAAsC;AACpC,QAAMS,aAAa,GAAGN,gBAAgB,CAACC,UAAD,EAAaL,MAAb,CAAtC;AACAU,IAAAA,aAAa,CAACC,WAAd,CAA0BV,SAA1B,EAAqC,UAAAW,KAAK,EAAI;AAC5C,UAAIA,KAAK,CAACC,OAAV,EAAmB;AAEjBhB,QAAAA,kBAAkB,CAACiB,IAAnB,CAA2BF,KAAK,CAACC,OAAjC,SAA4CZ,SAA5C,EAAyDW,KAAzD;AACD,OAHD,MAGO;AAELf,QAAAA,kBAAkB,CAACiB,IAAnB,CAAwBb,SAAxB,EAAmCW,KAAnC;AACD;AACF,KARD;AASAhB,IAAAA,oBAAoB,CAACK,SAAD,CAApB,GAAkC,IAAlC;AACD;AACF,CAdD;;AAgBO,IAAMc,kCAAkC,GAAG,SAArCA,kCAAqC,CAACf,MAAD,EAASgB,MAAT,EAAoB;AAAA,MAElEC,MAFkE,GAIhED,MAJgE,CAElEC,MAFkE;AAAA,MAGlEZ,UAHkE,GAIhEW,MAJgE,CAGlEX,UAHkE;;AAMpE,MAAIY,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,MAAM,CAACC,MAA7B,EAAqCC,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDV,MAAAA,6BAA6B,CAACJ,UAAD,EAAaL,MAAb,EAAqBiB,MAAM,CAACE,CAAD,CAA3B,CAA7B;AACD;AACF;AACF,CAXM","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nconst NATIVE_EMITTERS = {};\nconst NATIVE_SUBSCRIPTIONS = {};\nexport const SharedEventEmitter = new EventEmitter();\nexport const getAppEventName = (module, eventName) => `${module.app.name}-${eventName}`;\n\nconst getNativeEmitter = (moduleName, module) => {\n  const name = `${module.app.name}-${moduleName}`;\n  const nativeModule = NativeModules[moduleName];\n\n  if (!NATIVE_EMITTERS[name]) {\n    NATIVE_EMITTERS[name] = new NativeEventEmitter(nativeModule);\n  }\n\n  return NATIVE_EMITTERS[name];\n};\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param moduleName\n * @param module\n * @param eventName\n * @private\n */\n\n\nconst subscribeToNativeModuleEvents = (moduleName, module, eventName) => {\n  if (!NATIVE_SUBSCRIPTIONS[eventName]) {\n    const nativeEmitter = getNativeEmitter(moduleName, module);\n    nativeEmitter.addListener(eventName, event => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_SUBSCRIPTIONS[eventName] = true;\n  }\n};\n\nexport const initialiseNativeModuleEventEmitter = (module, config) => {\n  const {\n    events,\n    moduleName\n  } = config;\n\n  if (events && events.length) {\n    for (let i = 0, len = events.length; i < len; i++) {\n      subscribeToNativeModuleEvents(moduleName, module, events[i]);\n    }\n  }\n};"]},"metadata":{},"sourceType":"script"}